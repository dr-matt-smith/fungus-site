{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to Fungus Docs\n\n\nThis website provides the documentation pages to learn how to use Fungus from the\n\nFungusGames.com\n website.\n\n\nFeatures hello matt\n\n\n\n\nFlowchart based dialogues and games for Unity\n\n\nInternationalise your dialogues easily\n\n\nMatch audio to text dialogues\n\n\n\n\nContribute\n\n\n\n\nIssue Tracker: \nGitHub Fungus issue\n\n\nSource Code: \nGitHub Fungus repo\n\n\n\n\nSupport\n\n\nIf you are having issues, please let us know:\nEmail us at: \nchris@fungusgames.com\n\n\nLicense\n\n\nThe project is licensed under the MIT license.\n\n\nAuthors of these docs\n\n\n\n\nChris Gregan\n\n\nMatt Smith", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-fungus-docs", 
            "text": "This website provides the documentation pages to learn how to use Fungus from the FungusGames.com  website.", 
            "title": "Welcome to Fungus Docs"
        }, 
        {
            "location": "/#features-hello-matt", 
            "text": "Flowchart based dialogues and games for Unity  Internationalise your dialogues easily  Match audio to text dialogues", 
            "title": "Features hello matt"
        }, 
        {
            "location": "/#contribute", 
            "text": "Issue Tracker:  GitHub Fungus issue  Source Code:  GitHub Fungus repo", 
            "title": "Contribute"
        }, 
        {
            "location": "/#support", 
            "text": "If you are having issues, please let us know:\nEmail us at:  chris@fungusgames.com", 
            "title": "Support"
        }, 
        {
            "location": "/#license", 
            "text": "The project is licensed under the MIT license.", 
            "title": "License"
        }, 
        {
            "location": "/#authors-of-these-docs", 
            "text": "Chris Gregan  Matt Smith", 
            "title": "Authors of these docs"
        }, 
        {
            "location": "/recipes/0_index/", 
            "text": "Follow these steps to get up and started with Fungus quickly. Then learn more about what Fungus can do and how to do it from the other documentation pages and videos.\n\n\nInstalling Unity \n Fungus\n\n\nLearn how to install Unity, and then how to install Fungus.\n\n\nOpening and docking the Flowchart window\n\n\nYou'll need the Fungus Flowchart window when working with Fungus. Open and dock this window somewhere handy by following these steps:\n\n\n\n\n\n\nChoose menu: \nTools | Fungus | Flowchart Window\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDrag-and-drop the Flowchart window to the location you wish to dock it:\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe Flowchart window is now docked and part of your Unity window layout:\n\n\n\n\n\n\n\n\n\nFinding the example folders and scene files\n\n\nTwo folders are created when you install Fungus, the Fungus features themeslves (in folder 'Fungus') and a set of examples (in folder 'FungusExamples').\n\n\nExamples include Drag and Drop, Sherlock and Fungus Town:\n\n\n\n\n\n\n\nYou can use the left-hand side of the Unity Project window to explore each example folder:\n\n\n\n\n\n\n\nAlternatively, you can 'filter' the Project view to show all scenes (and no other files) by clicking the scene filter icon to the right of the search bar:\n\n\n\n\n\n\n\nYou can cancel the filter by clicking the 'x' in the search bar:\n\n\n\n\n\n\n\nLoading and playing the example scenes\n\n\nTo \nload\n an example scene, double click the desired example's scene object in the Projet window, and the scene should load. For example, this screenshot shows the scene and Flowchart windows when the DragAndDrop example scene has been loaded:\n\n\n\n\n\n\n\nTo \nrun\n the currently loaded scene (i.e. to entery \nPlay-mode\n), click the Unity 'play' triangle button at the center top of the Unity application window, and then do whatever makese sense in that scene (e..g click/type text/drag-and-drop objects etc.!):\n\n\n\n\n\n\n\nNote: you click the 'play' button a second time to end \nPlay-mode\n.\n\n\nChanges made during playmode don't persist\n\n\nAs with all Unity projects, you can \nchange\n the properties of gameObjects while a scene is running, but these changes are 'ephemeral' - they only last while the scene is running. As soon as you end play mode the properties of all objects in the Hierarchy will revert to those saved in the Scene file.\n\n\nThis makes it easy to 'tweak' values of objects in \nPlay-mode\n, and then when the desired behaviour is achieved, those values can be set for the saved scene properties.\n\n\nValues set when Unity is in \nEdit-mode\n will be saved when you saved your scene (\nCTRL-S\n / \nCommand-S\n, or menu: \nFile | Save Scene\n).\n\n\nChange your preferences to highlight Play-mode\n\n\nSometimes we can forget we are in Unity \nPlay-mode\n, and then make changes to Hierarchy gameObject values that are then 'fogotton' when we do stop playing the scene. A good way to avoid this problem is to to set a 'tint' to the Unity editor to make it visually very clear to us when we are in \nPlay-mode\n. To add a tint to \nPlay-mode\n do the following:\n\n\n\n\n\n\nOpen the Unity preferences dialog by choosing menu: \nFile | Preferences ...\n\n\n\n\n\n\nSelect the \nColors\n preferences, and choose a light colored tint (we chose a light green in this case):\n\n\n\n\n\n\n\n\n\n\n\n\n\nClose the dialog (changes are saved automatically).\n\n\n\n\n\n\nWhen you next enter \nPlay-mode\n you'll see most of the Unity Editor windows turn green (apart from the Game and Flowchart windows):\n\n\n\n\n\n\n\n\n\n\n\nCreating, naming and saving a new scene from scratch\n\n\nTo create a new scene in Unity do the following:\n\n\n\n\n\n\nChoose menu: \nFile | New Scene\n\n\n\n\n\n\nNote: if you have any unsaved changes for the current scene you need to either save or abandon them before a new scene can be created.\n\n\n\n\n\n\nYou should now have a shiny new scene, with a Hiearchy containing just one gameObject, a Main Camera. The new scene will have been give the default name \"Untitled\", which you can see in the title of the Application window:\n\n\n\n\n\n\n\n\n\n\n\n\n\nGood practice is to save your scene (in the right place, with the right name), before creating your work in the scene. Let's save this scene in the root of our project \"Assets\" folder, naming it \"demo1\". First choose menu: \nFile | Save Scene As...\n\n\n\n\n\n\nChoose the location and name (we'll choose folders \"Assets\" and scene name \"demo1\"):\n\n\n\n\n\n\n\n\n\n\n\n\n\nOnce you have successfully saved the scene you should now see the new scene file \"demo1\" in your Assets folder in the Project window, and you should also see in the Application window title that you are currently editing the scene named \"demo1\":\n\n\n\n\n\n\n\n\n\n\n\nMenu: Tools | Fungus\n\n\nThe core Fungus operations are available from the Unith \nTools\n menu.\n\n\nChoose menu: \nTools | Fungs\n to see the options availble:\n\n\n\n\n\n\n\nAs can be seen, there are 2 submenus, \nCreate\n and \nUtilities\n, plus the \nFlowchart Window\n action (which reveals the window if already open, or opens a new window if the Flowchart window was not previously opened).\n\n\nMenu: Tools | Fungus | Create\n\n\nThe Fungus Tools \nCreate\n submenu offers the following actions:\n\n\n\n\n\n\n\nMenu: Tools |  Fungus | Utilities\n\n\nThe Fungus Tools \nUtilties\n submenu offers the following actions:\n\n\n\n\n\n\n\nCreate a Flowchart\n\n\nTo create a Fungus Flowchart do the following:\n\n\n\n\n\n\nChoose menu: \nTools | Fungus | Create Flowchart\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA new \nFlowchart\n gameObject should appear in the Hierarchy window.\n\n\n\n\n\n\n\n\n\n\n\n\n\nSelect the \nFlowchart\n gameObject in the Hierarchy window, and you'll see the \nFlowchart's\n properties in the Inspector Window:\n\n\n\n\n\n\n\n\n\n\n\n\n\nIf you have not already displayed the Flowchart Window, you can do so by clicking the Flowchart Window button in the Inspector.\n\n\n\n\n\n\nAs you can see, when a new Flowchat is created a single command Block named \"New Block\" is automatically created, with the Event handler \"Game Started\" (so it will start executing Fungus commands as soon as the scene goes into \nPlay Mode\n).\n\n\n\n\n\n\nFlowchart Block property viewing and editing\n\n\nLet's change the name of the default command Block of a new Flowchart in the Flowchart window to \"hello\". Do the following:\n\n\n\n\n\n\nCreate a new Fungus Flowchart (if you haven't already done so).\n\n\n\n\n\n\nClick to select the Block in the Flowchart window (when multiple blocks are present, the selected one gets a green highlight border).\n\n\n\n\n\n\nIn the Inspector change the text for the Block Name property to \"hello\". You should see the Block name change in the Flowchart window:\n\n\n\n\n\n\n\n\n\n\n\nAdd a Say command\n\n\nTo add a \"Say\" command to a block do the following:\n\n\n\n\n\n\nEnsure the block is selected, and you can see its properties in the Inspector.\n\n\n\n\n\n\nClick the Plus button in the bottom half of the Inspector window, to add a new Command to the Block's properties:\n\n\n\n\n\n\n\n\n\n\n\n\n\nChoose menu: \nNarrative | Say\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\nSince this Block only has one Command, that command is automatically selected (shown with a green highlght).\n\n\n\n\n\n\nIn the \"Story Text\" textbox in the bottom half of the Inspector window type in \"hello Fugus world\":\n\n\n\n\n\n\n\n\n\n\n\n\n\nRun the scene, and see Fungus create a dialog window, and output the text contents of your Say command:\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdd 2 menu commands\n\n\nLet's modify our \"hello\" Say command above to ask a tricky mathematical quesiton, and demonsrate the Menu command by offering the user a choce been \"correct' and \"incorrect\" answers.  Menu commands transfer control to another block - so we'll need to add 2 new blocks to correspond to the 2 answers.\nDo the following:\n\n\n\n\n\n\nEdit your Say command, change the \nStory Text\n to ask the question: \"Is 2 + 2?\".\n\n\n\n\n\n\nUncheck the \"Wait For Click\" checkbox (this is so we see the menu options immediately after the Say command has displayed the question):\n\n\n\n\n\n\n\n\n\n\n\n\n\nCreate a new Block, named \"Correct\" which contains a \nSay\n command with the text \"Well done, you are very mathematical!\". Click the plus-sign button in the Flowchart window to add a new Block to the Flowchart, rename it \"Correct\" and then add that Say command:\n\n\n\n\n\n\n\n\n\n\n\n\n\nSelect the \"hello\" block, and add a Menu command by clicking the plus-sign add Command button in the Inspector and then choosing menu: \nNarrative | Menu\n.\n\n\n\n\n\n\n\n\n\n\n\n\n\nWith this new Menu command selected (green) in the top half of the Inspector window, set the \nText\n to \"Yes\" and the \nTarget Block\n to your new \"Correct\" block:\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou should now see how the 'flow' of commands can change from Block \"hello\" to Block \"correct\" in the Flowchart window:\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdd a second new Block named \"Wrong\", containing a Say command with text \"Bad luck, perhaps consider a non-mathematical career path...\"\n\n\n\n\n\n\n\n\n\n\n\n\n\nNow we need to add another Menu command to our \"hello\" block, offering the user the \"No\" answer to our maths question, and passing control to Block \"Wrong\" if they disagree that 2 + 2 = 4. Select the \"hello\" block, and add a Menu command. With this new Menu command selected (green) in the top half of the Inspector window, set the \nText\n to \"No\" and the \nTarget Block\n to your new \"Wrong\" block.\n\n\n\n\n\n\nYou should now see in the Flowchart window how block \"hello\" can pass control to either block \"Correct\" or Block \"Wrong\" - depending on which menu answer the user selects.\n\n\n\n\n\n\n\n\n\n\n\n\n\nRun the scene, and you should see the Say question appear at the bottom of the screen, and also the two Menu buttons \"Yes\" and \"No\" in the middle of the screen. Clicking \"Yes\" then runs the \"Correct\" Block's commands, and clicking \"No\" runs the \"Wrong\" block's commands:", 
            "title": "Recipes"
        }, 
        {
            "location": "/recipes/0_index/#installing-unity-fungus", 
            "text": "Learn how to install Unity, and then how to install Fungus.", 
            "title": "Installing Unity  Fungus"
        }, 
        {
            "location": "/recipes/0_index/#opening-and-docking-the-flowchart-window", 
            "text": "You'll need the Fungus Flowchart window when working with Fungus. Open and dock this window somewhere handy by following these steps:    Choose menu:  Tools | Fungus | Flowchart Window        Drag-and-drop the Flowchart window to the location you wish to dock it:       The Flowchart window is now docked and part of your Unity window layout:", 
            "title": "Opening and docking the Flowchart window"
        }, 
        {
            "location": "/recipes/0_index/#finding-the-example-folders-and-scene-files", 
            "text": "Two folders are created when you install Fungus, the Fungus features themeslves (in folder 'Fungus') and a set of examples (in folder 'FungusExamples').  Examples include Drag and Drop, Sherlock and Fungus Town:    You can use the left-hand side of the Unity Project window to explore each example folder:    Alternatively, you can 'filter' the Project view to show all scenes (and no other files) by clicking the scene filter icon to the right of the search bar:    You can cancel the filter by clicking the 'x' in the search bar:", 
            "title": "Finding the example folders and scene files"
        }, 
        {
            "location": "/recipes/0_index/#loading-and-playing-the-example-scenes", 
            "text": "To  load  an example scene, double click the desired example's scene object in the Projet window, and the scene should load. For example, this screenshot shows the scene and Flowchart windows when the DragAndDrop example scene has been loaded:    To  run  the currently loaded scene (i.e. to entery  Play-mode ), click the Unity 'play' triangle button at the center top of the Unity application window, and then do whatever makese sense in that scene (e..g click/type text/drag-and-drop objects etc.!):    Note: you click the 'play' button a second time to end  Play-mode .", 
            "title": "Loading and playing the example scenes"
        }, 
        {
            "location": "/recipes/0_index/#changes-made-during-playmode-dont-persist", 
            "text": "As with all Unity projects, you can  change  the properties of gameObjects while a scene is running, but these changes are 'ephemeral' - they only last while the scene is running. As soon as you end play mode the properties of all objects in the Hierarchy will revert to those saved in the Scene file.  This makes it easy to 'tweak' values of objects in  Play-mode , and then when the desired behaviour is achieved, those values can be set for the saved scene properties.  Values set when Unity is in  Edit-mode  will be saved when you saved your scene ( CTRL-S  /  Command-S , or menu:  File | Save Scene ).", 
            "title": "Changes made during playmode don't persist"
        }, 
        {
            "location": "/recipes/0_index/#change-your-preferences-to-highlight-play-mode", 
            "text": "Sometimes we can forget we are in Unity  Play-mode , and then make changes to Hierarchy gameObject values that are then 'fogotton' when we do stop playing the scene. A good way to avoid this problem is to to set a 'tint' to the Unity editor to make it visually very clear to us when we are in  Play-mode . To add a tint to  Play-mode  do the following:    Open the Unity preferences dialog by choosing menu:  File | Preferences ...    Select the  Colors  preferences, and choose a light colored tint (we chose a light green in this case):       Close the dialog (changes are saved automatically).    When you next enter  Play-mode  you'll see most of the Unity Editor windows turn green (apart from the Game and Flowchart windows):", 
            "title": "Change your preferences to highlight Play-mode"
        }, 
        {
            "location": "/recipes/0_index/#creating-naming-and-saving-a-new-scene-from-scratch", 
            "text": "To create a new scene in Unity do the following:    Choose menu:  File | New Scene    Note: if you have any unsaved changes for the current scene you need to either save or abandon them before a new scene can be created.    You should now have a shiny new scene, with a Hiearchy containing just one gameObject, a Main Camera. The new scene will have been give the default name \"Untitled\", which you can see in the title of the Application window:       Good practice is to save your scene (in the right place, with the right name), before creating your work in the scene. Let's save this scene in the root of our project \"Assets\" folder, naming it \"demo1\". First choose menu:  File | Save Scene As...    Choose the location and name (we'll choose folders \"Assets\" and scene name \"demo1\"):       Once you have successfully saved the scene you should now see the new scene file \"demo1\" in your Assets folder in the Project window, and you should also see in the Application window title that you are currently editing the scene named \"demo1\":", 
            "title": "Creating, naming and saving a new scene from scratch"
        }, 
        {
            "location": "/recipes/0_index/#menu-tools-fungus", 
            "text": "The core Fungus operations are available from the Unith  Tools  menu.  Choose menu:  Tools | Fungs  to see the options availble:    As can be seen, there are 2 submenus,  Create  and  Utilities , plus the  Flowchart Window  action (which reveals the window if already open, or opens a new window if the Flowchart window was not previously opened).  Menu: Tools | Fungus | Create  The Fungus Tools  Create  submenu offers the following actions:    Menu: Tools |  Fungus | Utilities  The Fungus Tools  Utilties  submenu offers the following actions:", 
            "title": "Menu: Tools | Fungus"
        }, 
        {
            "location": "/recipes/0_index/#create-a-flowchart", 
            "text": "To create a Fungus Flowchart do the following:    Choose menu:  Tools | Fungus | Create Flowchart        A new  Flowchart  gameObject should appear in the Hierarchy window.       Select the  Flowchart  gameObject in the Hierarchy window, and you'll see the  Flowchart's  properties in the Inspector Window:       If you have not already displayed the Flowchart Window, you can do so by clicking the Flowchart Window button in the Inspector.    As you can see, when a new Flowchat is created a single command Block named \"New Block\" is automatically created, with the Event handler \"Game Started\" (so it will start executing Fungus commands as soon as the scene goes into  Play Mode ).", 
            "title": "Create a Flowchart"
        }, 
        {
            "location": "/recipes/0_index/#flowchart-block-property-viewing-and-editing", 
            "text": "Let's change the name of the default command Block of a new Flowchart in the Flowchart window to \"hello\". Do the following:    Create a new Fungus Flowchart (if you haven't already done so).    Click to select the Block in the Flowchart window (when multiple blocks are present, the selected one gets a green highlight border).    In the Inspector change the text for the Block Name property to \"hello\". You should see the Block name change in the Flowchart window:", 
            "title": "Flowchart Block property viewing and editing"
        }, 
        {
            "location": "/recipes/0_index/#add-a-say-command", 
            "text": "To add a \"Say\" command to a block do the following:    Ensure the block is selected, and you can see its properties in the Inspector.    Click the Plus button in the bottom half of the Inspector window, to add a new Command to the Block's properties:       Choose menu:  Narrative | Say :       Since this Block only has one Command, that command is automatically selected (shown with a green highlght).    In the \"Story Text\" textbox in the bottom half of the Inspector window type in \"hello Fugus world\":       Run the scene, and see Fungus create a dialog window, and output the text contents of your Say command:", 
            "title": "Add a Say command"
        }, 
        {
            "location": "/recipes/0_index/#add-2-menu-commands", 
            "text": "Let's modify our \"hello\" Say command above to ask a tricky mathematical quesiton, and demonsrate the Menu command by offering the user a choce been \"correct' and \"incorrect\" answers.  Menu commands transfer control to another block - so we'll need to add 2 new blocks to correspond to the 2 answers.\nDo the following:    Edit your Say command, change the  Story Text  to ask the question: \"Is 2 + 2?\".    Uncheck the \"Wait For Click\" checkbox (this is so we see the menu options immediately after the Say command has displayed the question):       Create a new Block, named \"Correct\" which contains a  Say  command with the text \"Well done, you are very mathematical!\". Click the plus-sign button in the Flowchart window to add a new Block to the Flowchart, rename it \"Correct\" and then add that Say command:       Select the \"hello\" block, and add a Menu command by clicking the plus-sign add Command button in the Inspector and then choosing menu:  Narrative | Menu .       With this new Menu command selected (green) in the top half of the Inspector window, set the  Text  to \"Yes\" and the  Target Block  to your new \"Correct\" block:       You should now see how the 'flow' of commands can change from Block \"hello\" to Block \"correct\" in the Flowchart window:       Add a second new Block named \"Wrong\", containing a Say command with text \"Bad luck, perhaps consider a non-mathematical career path...\"       Now we need to add another Menu command to our \"hello\" block, offering the user the \"No\" answer to our maths question, and passing control to Block \"Wrong\" if they disagree that 2 + 2 = 4. Select the \"hello\" block, and add a Menu command. With this new Menu command selected (green) in the top half of the Inspector window, set the  Text  to \"No\" and the  Target Block  to your new \"Wrong\" block.    You should now see in the Flowchart window how block \"hello\" can pass control to either block \"Correct\" or Block \"Wrong\" - depending on which menu answer the user selects.       Run the scene, and you should see the Say question appear at the bottom of the screen, and also the two Menu buttons \"Yes\" and \"No\" in the middle of the screen. Clicking \"Yes\" then runs the \"Correct\" Block's commands, and clicking \"No\" runs the \"Wrong\" block's commands:", 
            "title": "Add 2 menu commands"
        }, 
        {
            "location": "/quickstart2/", 
            "text": "Having got up and running, here are some next steps to get to know what you can do with Fungus.\n\n\nAdd a character, use in the Say command\n\n\nAdd a Stage\n\n\nAdd a Portrait command\n\n\nPlay some music\n\n\nAdd a background sprite\n\n\nAdd a view\n\n\nAdd a Fade To View command", 
            "title": "Quick Start 2 - next steps"
        }, 
        {
            "location": "/quickstart2/#add-a-character-use-in-the-say-command", 
            "text": "", 
            "title": "Add a character, use in the Say command"
        }, 
        {
            "location": "/quickstart2/#add-a-stage", 
            "text": "", 
            "title": "Add a Stage"
        }, 
        {
            "location": "/quickstart2/#add-a-portrait-command", 
            "text": "", 
            "title": "Add a Portrait command"
        }, 
        {
            "location": "/quickstart2/#play-some-music", 
            "text": "", 
            "title": "Play some music"
        }, 
        {
            "location": "/quickstart2/#add-a-background-sprite", 
            "text": "", 
            "title": "Add a background sprite"
        }, 
        {
            "location": "/quickstart2/#add-a-view", 
            "text": "", 
            "title": "Add a view"
        }, 
        {
            "location": "/quickstart2/#add-a-fade-to-view-command", 
            "text": "", 
            "title": "Add a Fade To View command"
        }, 
        {
            "location": "/audio/audio/", 
            "text": "Audio in Fungus games\n\n\nAlmost every game benefits from some sound! Often we categories audio clips into three kinds:\n\n\n\n\nMusic\n\n\nSound effects\n\n\nSpeech\n\n\n\n\nFungus provides straightforward ways to include all 3 kinds of audio clip in your game, using the techniques presented here.\n\n\n\n\n\nSources of free to use audio clips and music\n\n\nBefore you can \nadd\n audio clips to a game you need to get some audio clips. Here are some sources of audio clips to use when learning about audio in Fungus, in case you don't have some of your own to hand.\n\n\nThe following are some good places online to fine music and sound effects for games. Some are free for any use (including commerical), some are just free for personal use. As always, check the licence of media assets before using them for any commerical products ...\n\n\n\n\nFreesound.org\n\n\nlots of creative commons and royalty free sounds at \nSoundBible.com\n\n\na great list of audio sources in peoples answers to questions at \nAnswers.unity3d\n and \nStackOverflow.com\n\n\nmixture of free and paid music sources at \nPixelProspector.com\n\n\n\n\nYou'll find a range of audio clips included inside the Fungus Examples folders:\n\n\n\n\n\n\n\nAdding audio assets to your project\n\n\nOnce you have some audio clips on your computer, you need to import them into your Unity project.\n\n\nMethod 1 (menu)\n\n\nYou can do this one clip at a time, by choosing menu: \nAssets | Import New Asset...\n and navigating to and selecting each clip.\n\n\nMethod 2 (drag-drop)\n\n\nAlternatively you can \ndrag\n files or entire folders into your Unity Project window, and Unity will make a copy of, and then import the dragged files:\n\n\n\n\n\n\n\n\n\n\n\nThree ways to work with audio in Fungus games\n\n\nThere are 3 main ways to work with audio in Fungus games. These are the Audio commands, the Say command, and gameObjects containing Unity Audio Source components. All three are discussed below:\n\n\n\n\n\n\n\n\n\n\nList of Fungus audio commands\n\n\nThe range of audio \nCommands\n you can add to a Block are as follows:\n\n\n\n\n\n\n\nAlso you can declare an audio clip that contains the speech voiceover to correspond to text displayed with a \nSay\n command:\n\n\n\n\n\n\n\n\n\n\nPlay Music command\n\n\nMusic sound clips loop, so they are restarted once they have finished playing. Often the first Command in a Block is a \nPlay Music\n Command. Add music to a Block as follws:\n\n\n\n\n\n\n(if you have not already done so: Create a new scene, add a Fungus Flowchart to the scene, and select the Block in the Flowchart).\n\n\n\n\n\n\nAdd a Play Music Command to the current Block by clicking the Add Command (plus-sign \"+\" button) in the Inspector, and then choosing menu: \nAudio | Play Music\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\nChange the volume as desired\n\n(the default is 1, values are between 0.0 and 1.0, representing percentages of volume from 0% - 100%).\n\n\n\n\n\n\nPlay your scene - the music clip should play, and keep looping.\n\n\n\n\n\n\nNOTE: If you wish to start playing the music clip from a known timepoint (rather than from the beginning), then enter the desired timepoint in the Inspector property \"At Time\" for your Play Music command.\n\n\n\n\n\nPlay Sound command\n\n\nThe Fungus Play Sound Command will play a stated audio clip once. With your Flowchart Block selected, click the Add Command button in the Inspector and choose menu: \nAudio | Play Sound\n. Drag in a sound effect (we chose the BearRoad sound from the Hunter example):\n\n\n\n\n\n\n\nPlay the scene, you should hear your sound effect play once.\n\n\nNote. The default Fungus setting is for the sound effect to start playing, and while it is playing the next Command in the Block will start executing. However, you if you check the \"Wait Until Finished\" checkbox, then Fungus will wait until the sound effect has finished playing, before moving on to execute the next Command in the block:\n\n\n\n\n\n\n\n\n\n\nSet Audio Volume command\n\n\nThe 3 Unity audio concepts\n\n\nUnity has 3 different kinds of Audio 'object', that it is worth understanding when working with audio in Fungus (or any other) Unity project:\n\n\n\n\nAudio Clip\n\n\nAudio Listener\n\n\nAudio Source\n\n\n\n\nUnity Audio Clip\n\n\nUnity uses the term Audio \"Clip\" to refer to the physical sound files (.mp3, .wav, .ogg etc.) that are stored in your Project folder. It is these Audio Clip files that you drag and drop into the \"Music Clip\" and \"Sound Clip\" properties in the Inspector Window, when creating Play Music and Play Sound Commands in a Fungus Block.\n\n\nUnity Audio \"Listener\"\n\n\nBasically, if you want sound to be played there must be an Audio Listener component inside one of the gameObjects in your scene. The Main Camera of a scene has one by default, so in most cases you just leave this alone and can rest assured that you have an Audio Listener.\n\n\nIf a scene has no Audio Listener in any gameObject, then no audio will be heard by the user of the game, regardless of how many music and sound clips might be playing.\n\n\nSometimes you may add gameObjects to your scene that contain another Audio Listener component. In this case, Unity will present a warnig message stating that more than 1 Audio Listener is present in the scene. If you see such a message, then its best to resolve this problem by disabling all but one Audio Listener...\n\n\nIf you are working with a 3D game, and/or you wish to present a sophisticated stereo sound experience for your user, then you may need to learn about 3D audio. In such games the 3D \"position\" of the gameObject containing the Audio Listener becomes important - but don't worry about this if you are just getting started with audio in Fungus. For 3D effects the Audio Listener is like an \"electronic ear\", so its location determines things like how loud a sound is played (distance from \"ear\") and left-right stereo balance (which \"side\" audio is to the \"ear\") etc.\n\n\nUnity Audio Source\n\n\nIn Unity the link between an Audio Clip (music/sound) file that we wish to be played, and the Audio Listener in the scene is a Unity Audio Source component of a gameObject. However, in most cases Fungus creates one of these if neeeded, so we don't need to worry about them!\n\n\nHowever, for sophisticated control of music and sound and speech in your game there is the facility to make Fungus have detailed control of Unity Audio Sources. It is an Audio Source component that controls how and when and which part of an audio clip is playing (and whether it should loop or not), and whether it is playing or paused, and when resuming should continue from where paused or restart. The volume of a playing clip can also be controlled by properties of an Audio Source.\n\n\nLearn more about audio in Unity at the \nUnity Manual Audio Page\n.\n\n\n\nControl Audio command\n\n\n\n\n\nAudio Tags (link to Say command docs)\n\n\n{audio=AudioObjectName} Play Audio Once\n{audioloop=AudioObjectName} Play Audio Loop\n{audiopause=AudioObjectName} Pause Audio\n{audiostop=AudioObjectName} Stop Audio", 
            "title": "Audio"
        }, 
        {
            "location": "/audio/audio/#audio-in-fungus-games", 
            "text": "Almost every game benefits from some sound! Often we categories audio clips into three kinds:   Music  Sound effects  Speech   Fungus provides straightforward ways to include all 3 kinds of audio clip in your game, using the techniques presented here.", 
            "title": "Audio in Fungus games"
        }, 
        {
            "location": "/audio/audio/#sources-of-free-to-use-audio-clips-and-music", 
            "text": "Before you can  add  audio clips to a game you need to get some audio clips. Here are some sources of audio clips to use when learning about audio in Fungus, in case you don't have some of your own to hand.  The following are some good places online to fine music and sound effects for games. Some are free for any use (including commerical), some are just free for personal use. As always, check the licence of media assets before using them for any commerical products ...   Freesound.org  lots of creative commons and royalty free sounds at  SoundBible.com  a great list of audio sources in peoples answers to questions at  Answers.unity3d  and  StackOverflow.com  mixture of free and paid music sources at  PixelProspector.com   You'll find a range of audio clips included inside the Fungus Examples folders:", 
            "title": "Sources of free to use audio clips and music"
        }, 
        {
            "location": "/audio/audio/#adding-audio-assets-to-your-project", 
            "text": "Once you have some audio clips on your computer, you need to import them into your Unity project.  Method 1 (menu)  You can do this one clip at a time, by choosing menu:  Assets | Import New Asset...  and navigating to and selecting each clip.  Method 2 (drag-drop)  Alternatively you can  drag  files or entire folders into your Unity Project window, and Unity will make a copy of, and then import the dragged files:", 
            "title": "Adding audio assets to your project"
        }, 
        {
            "location": "/audio/audio/#three-ways-to-work-with-audio-in-fungus-games", 
            "text": "There are 3 main ways to work with audio in Fungus games. These are the Audio commands, the Say command, and gameObjects containing Unity Audio Source components. All three are discussed below:", 
            "title": "Three ways to work with audio in Fungus games"
        }, 
        {
            "location": "/audio/audio/#list-of-fungus-audio-commands", 
            "text": "The range of audio  Commands  you can add to a Block are as follows:    Also you can declare an audio clip that contains the speech voiceover to correspond to text displayed with a  Say  command:", 
            "title": "List of Fungus audio commands"
        }, 
        {
            "location": "/audio/audio/#play-music-command", 
            "text": "Music sound clips loop, so they are restarted once they have finished playing. Often the first Command in a Block is a  Play Music  Command. Add music to a Block as follws:    (if you have not already done so: Create a new scene, add a Fungus Flowchart to the scene, and select the Block in the Flowchart).    Add a Play Music Command to the current Block by clicking the Add Command (plus-sign \"+\" button) in the Inspector, and then choosing menu:  Audio | Play Music :       Change the volume as desired (the default is 1, values are between 0.0 and 1.0, representing percentages of volume from 0% - 100%).    Play your scene - the music clip should play, and keep looping.    NOTE: If you wish to start playing the music clip from a known timepoint (rather than from the beginning), then enter the desired timepoint in the Inspector property \"At Time\" for your Play Music command.", 
            "title": "Play Music command"
        }, 
        {
            "location": "/audio/audio/#play-sound-command", 
            "text": "The Fungus Play Sound Command will play a stated audio clip once. With your Flowchart Block selected, click the Add Command button in the Inspector and choose menu:  Audio | Play Sound . Drag in a sound effect (we chose the BearRoad sound from the Hunter example):    Play the scene, you should hear your sound effect play once.  Note. The default Fungus setting is for the sound effect to start playing, and while it is playing the next Command in the Block will start executing. However, you if you check the \"Wait Until Finished\" checkbox, then Fungus will wait until the sound effect has finished playing, before moving on to execute the next Command in the block:", 
            "title": "Play Sound command"
        }, 
        {
            "location": "/audio/audio/#set-audio-volume-command", 
            "text": "", 
            "title": "Set Audio Volume command"
        }, 
        {
            "location": "/audio/audio/#the-3-unity-audio-concepts", 
            "text": "Unity has 3 different kinds of Audio 'object', that it is worth understanding when working with audio in Fungus (or any other) Unity project:   Audio Clip  Audio Listener  Audio Source   Unity Audio Clip  Unity uses the term Audio \"Clip\" to refer to the physical sound files (.mp3, .wav, .ogg etc.) that are stored in your Project folder. It is these Audio Clip files that you drag and drop into the \"Music Clip\" and \"Sound Clip\" properties in the Inspector Window, when creating Play Music and Play Sound Commands in a Fungus Block.  Unity Audio \"Listener\"  Basically, if you want sound to be played there must be an Audio Listener component inside one of the gameObjects in your scene. The Main Camera of a scene has one by default, so in most cases you just leave this alone and can rest assured that you have an Audio Listener.  If a scene has no Audio Listener in any gameObject, then no audio will be heard by the user of the game, regardless of how many music and sound clips might be playing.  Sometimes you may add gameObjects to your scene that contain another Audio Listener component. In this case, Unity will present a warnig message stating that more than 1 Audio Listener is present in the scene. If you see such a message, then its best to resolve this problem by disabling all but one Audio Listener...  If you are working with a 3D game, and/or you wish to present a sophisticated stereo sound experience for your user, then you may need to learn about 3D audio. In such games the 3D \"position\" of the gameObject containing the Audio Listener becomes important - but don't worry about this if you are just getting started with audio in Fungus. For 3D effects the Audio Listener is like an \"electronic ear\", so its location determines things like how loud a sound is played (distance from \"ear\") and left-right stereo balance (which \"side\" audio is to the \"ear\") etc.  Unity Audio Source  In Unity the link between an Audio Clip (music/sound) file that we wish to be played, and the Audio Listener in the scene is a Unity Audio Source component of a gameObject. However, in most cases Fungus creates one of these if neeeded, so we don't need to worry about them!  However, for sophisticated control of music and sound and speech in your game there is the facility to make Fungus have detailed control of Unity Audio Sources. It is an Audio Source component that controls how and when and which part of an audio clip is playing (and whether it should loop or not), and whether it is playing or paused, and when resuming should continue from where paused or restart. The volume of a playing clip can also be controlled by properties of an Audio Source.  Learn more about audio in Unity at the  Unity Manual Audio Page .", 
            "title": "The 3 Unity audio concepts"
        }, 
        {
            "location": "/audio/audio/#control-audio-command", 
            "text": "", 
            "title": "Control Audio command"
        }, 
        {
            "location": "/audio/audio/#audio-tags-link-to-say-command-docs", 
            "text": "{audio=AudioObjectName} Play Audio Once\n{audioloop=AudioObjectName} Play Audio Loop\n{audiopause=AudioObjectName} Pause Audio\n{audiostop=AudioObjectName} Stop Audio", 
            "title": "Audio Tags (link to Say command docs)"
        }
    ]
}