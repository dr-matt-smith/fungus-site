{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to Fungus Docs\n\n\nThis website provides the documentation pages to learn how to use Fungus from the\n\nFungusGames.com\n website.\n\n\nFeatures hello matt\n\n\n\n\nFlowchart based dialogues and games for Unity\n\n\nInternationalise your dialogues easily\n\n\nMatch audio to text dialogues\n\n\n\n\nContribute\n\n\n\n\nIssue Tracker: \nGitHub Fungus issue\n\n\nSource Code: \nGitHub Fungus repo\n\n\n\n\nSupport\n\n\nIf you are having issues, please let us know:\nEmail us at: \nchris@fungusgames.com\n\n\nLicense\n\n\nThe project is licensed under the MIT license.\n\n\nAuthors of these docs\n\n\n\n\nChris Gregan\n\n\nMatt Smith", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-fungus-docs", 
            "text": "This website provides the documentation pages to learn how to use Fungus from the FungusGames.com  website.", 
            "title": "Welcome to Fungus Docs"
        }, 
        {
            "location": "/#features-hello-matt", 
            "text": "Flowchart based dialogues and games for Unity  Internationalise your dialogues easily  Match audio to text dialogues", 
            "title": "Features hello matt"
        }, 
        {
            "location": "/#contribute", 
            "text": "Issue Tracker:  GitHub Fungus issue  Source Code:  GitHub Fungus repo", 
            "title": "Contribute"
        }, 
        {
            "location": "/#support", 
            "text": "If you are having issues, please let us know:\nEmail us at:  chris@fungusgames.com", 
            "title": "Support"
        }, 
        {
            "location": "/#license", 
            "text": "The project is licensed under the MIT license.", 
            "title": "License"
        }, 
        {
            "location": "/#authors-of-these-docs", 
            "text": "Chris Gregan  Matt Smith", 
            "title": "Authors of these docs"
        }, 
        {
            "location": "/recipes/", 
            "text": "Follow these steps to get up and started with Fungus quickly. Then learn more about what Fungus can do and how to do it from the other documentation pages and videos.\n\n\nInstalling Unity\n\n\nDownload and install the latest version of Unity from the\n\nUnity3D.com\n\nwebsite.\n\n\nNote, the download page is usually located at:\n\nUnity3D.com/get-unity\n\n\nInstalling Fungus - from Unity Asset store\n\n\nFollow these steps to quickly install Fungus for a Unity project via the Unity Asset Store:\n\n\n\n\n\n\nCreate a new Unity 2D project.\n\n\n\n\n\n\nOpen the Asset Store window.\n\n\n\n\n\n\nNavigate to: \nEditor Extensions | Game Toolkis | Visual Novels\n (or search for Fungus!).\n\n\n\n\n\n\n\n\n\n\n\n\n\nOn the Fungus details page click the Import button,\n\n(the first time you download Fungus you'll be asked to agree to the MIT open source licence):\n\n\n\n\n\n\n\n\n\n\n\n\n\nChoose to import all contents from this package.\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou should now see a Fungus folder in your Project panel, containing both the Fungus flowcharting features themselves, as well as some sample scenes to get you started:\n\n\n\n\n\nInstalling Fungus - from Fungus package\n\n\nFollow these steps to quickly install Fungus for a Unity project:\n\n\n\n\n\n\nDownload the latest version of the Fungus unitypackage from the \nFungusGames.com\n website.\n\n\n\n\n\n\nCreate a new Unity 2D project.\n\n\n\n\n\n\nImport the Fungus unitypackage by choosing menu: \nAssets | Import Package | Custom Package...\n, and then navigating to your downloaded file location.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nChoose to import all contents from this package.\n\n\n\n\n\n\n\n\n\n\n\nYou should now see a Fungus folder in your Project panel, containing both the Fungus flowcharting features themselves, as well as some sample scenes to get you started:\n\n\n\n\n\nOpening and docking the Flowchart window\n\n\nYou'll need the Fungus Flowchart window when working with Fungus. Open and dock this window somewhere handy by following these steps:\n\n\n\n\n\n\nChoose menu: \nTools | Fungus | Flowchart Window\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDrag-and-drop the Flowchart window to the location you wish to dock it:\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe Flowchart window is now docked and part of your Unity window layout:\n\n\n\n\n\n\n\n\n\nFinding the example folders and scene files\n\n\nTwo folders are created when you install Fungus, the Fungus features themeslves (in folder 'Fungus') and a set of examples (in folder 'FungusExamples').\n\n\nExamples include Drag and Drop, Sherlock and Fungus Town:\n\n\n\n\n\n\n\nYou can use the left-hand side of the Unity Project window to explore each example folder:\n\n\n\n\n\n\n\nAlternatively, you can 'filter' the Project view to show all scenes (and no other files) by clicking the scene filter icon to the right of the search bar:\n\n\n\n\n\n\n\nYou can cancel the filter by clicking the 'x' in the search bar:\n\n\n\n\n\n\n\nLoading and playing the example scenes\n\n\nTo \nload\n an example scene, double click the desired example's scene object in the Projet window, and the scene should load. For example, this screenshot shows the scene and Flowchart windows when the DragAndDrop example scene has been loaded:\n\n\n\n\n\n\n\nTo \nrun\n the currently loaded scene (i.e. to entery \nPlay-mode\n), click the Unity 'play' triangle button at the center top of the Unity application window, and then do whatever makese sense in that scene (e..g click/type text/drag-and-drop objects etc.!):\n\n\n\n\n\n\n\nNote: you click the 'play' button a second time to end \nPlay-mode\n.\n\n\nChanges made during playmode don't persist\n\n\nAs with all Unity projects, you can \nchange\n the properties of gameObjects while a scene is running, but these changes are 'ephemeral' - they only last while the scene is running. As soon as you end play mode the properties of all objects in the Hierarchy will revert to those saved in the Scene file.\n\n\nThis makes it easy to 'tweak' values of objects in \nPlay-mode\n, and then when the desired behaviour is achieved, those values can be set for the saved scene properties.\n\n\nValues set when Unity is in \nEdit-mode\n will be saved when you saved your scene (\nCTRL-S\n / \nCommand-S\n, or menu: \nFile | Save Scene\n).\n\n\nChange your preferences to highlight Play-mode\n\n\nSometimes we can forget we are in Unity \nPlay-mode\n, and then make changes to Hierarchy gameObject values that are then 'fogotton' when we do stop playing the scene. A good way to avoid this problem is to to set a 'tint' to the Unity editor to make it visually very clear to us when we are in \nPlay-mode\n. To add a tint to \nPlay-mode\n do the following:\n\n\n\n\n\n\nOpen the Unity preferences dialog by choosing menu: \nFile | Preferences ...\n\n\n\n\n\n\nSelect the \nColors\n preferences, and choose a light colored tint (we chose a light green in this case):\n\n\n\n\n\n\n\n\n\n\n\n\n\nClose the dialog (changes are saved automatically).\n\n\n\n\n\n\nWhen you next enter \nPlay-mode\n you'll see most of the Unity Editor windows turn green (apart from the Game and Flowchart windows):\n\n\n\n\n\n\n\n\n\n\n\nCreating, naming and saving a new scene from scratch\n\n\nTo create a new scene in Unity do the following:\n\n\n\n\n\n\nChoose menu: \nFile | New Scene\n\n\n\n\n\n\nNote: if you have any unsaved changes for the current scene you need to either save or abandon them before a new scene can be created.\n\n\n\n\n\n\nYou should now have a shiny new scene, with a Hiearchy containing just one gameObject, a Main Camera. The new scene will have been give the default name \"Untitled\", which you can see in the title of the Application window:\n\n\n\n\n\n\n\n\n\n\n\n\n\nGood practice is to save your scene (in the right place, with the right name), before creating your work in the scene. Let's save this scene in the root of our project \"Assets\" folder, naming it \"demo1\". First choose menu: \nFile | Save Scene As...\n\n\n\n\n\n\nChoose the location and name (we'll choose folders \"Assets\" and scene name \"demo1\"):\n\n\n\n\n\n\n\n\n\n\n\n\n\nOnce you have successfully saved the scene you should now see the new scene file \"demo1\" in your Assets folder in the Project window, and you should also see in the Application window title that you are currently editing the scene named \"demo1\":\n\n\n\n\n\n\n\n\n\n\n\nMenu: Tools | Fungus\n\n\nThe core Fungus operations are available from the Unith \nTools\n menu.\n\n\nChoose menu: \nTools | Fungus\n to see the options availble:\n\n\n\n\n\n\n\nAs can be seen, there are 2 submenus, \nCreate\n and \nUtilities\n, plus the \nFlowchart Window\n action (which reveals the window if already open, or opens a new window if the Flowchart window was not previously opened).\n\n\nMenu: Tools | Fungus | Create\n\n\nThe Fungus Tools \nCreate\n submenu offers the following actions:\n\n\n\n\n\n\n\nMenu: Tools |  Fungus | Utilities\n\n\nThe Fungus Tools \nUtilties\n submenu offers the following actions:\n\n\n\n\n\n\n\nCreate a Flowchart\n\n\nTo create a Fungus Flowchart do the following:\n\n\n\n\n\n\nChoose menu: \nTools | Fungus | Create Flowchart\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA new \nFlowchart\n gameObject should appear in the Hierarchy window.\n\n\n\n\n\n\n\n\n\n\n\n\n\nSelect the \nFlowchart\n gameObject in the Hierarchy window, and you'll see the \nFlowchart's\n properties in the Inspector Window:\n\n\n\n\n\n\n\n\n\n\n\n\n\nIf you have not already displayed the Flowchart Window, you can do so by clicking the Flowchart Window button in the Inspector.\n\n\n\n\n\n\nAs you can see, when a new Flowchat is created a single command Block named \"New Block\" is automatically created, with the Event handler \"Game Started\" (so it will start executing Fungus commands as soon as the scene goes into \nPlay Mode\n).\n\n\n\n\n\n\nFlowchart Block property viewing and editing\n\n\nLet's change the name of the default command Block of a new Flowchart in the Flowchart window to \"hello\". Do the following:\n\n\n\n\n\n\nCreate a new Fungus Flowchart (if you haven't already done so).\n\n\n\n\n\n\nClick to select the Block in the Flowchart window (when multiple blocks are present, the selected one gets a green highlight border).\n\n\n\n\n\n\nIn the Inspector change the text for the Block Name property to \"hello\". You should see the Block name change in the Flowchart window:\n\n\n\n\n\n\n\n\n\n\n\nAdd a Say command\n\n\nTo add a \"Say\" command to a Block do the following:\n\n\n\n\n\n\n(setup) Create a new scene, add a Fungus Flowchart to the scene.\n\n\n\n\n\n\nEnsure the Block is selected, and you can see its properties in the Inspector, and ensure the name of the Block is \"hello\".\n\n\n\n\n\n\nClick the Plus button in the bottom half of the Inspector window, to add a new Command to the Block's properties:\n\n\n\n\n\n\n\n\n\n\n\n\n\nChoose menu: \nNarrative | Say\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\nSince this Block only has one Command, that command is automatically selected (shown with a green highlght).\n\n\n\n\n\n\nIn the \"Story Text\" textbox in the bottom half of the Inspector window type in \"hello Fugus world\":\n\n\n\n\n\n\n\n\n\n\n\n\n\nRun the scene, and see Fungus create a dialog window, and output the text contents of your Say command:", 
            "title": "Recipes - quickstart"
        }, 
        {
            "location": "/recipes/#installing-unity", 
            "text": "Download and install the latest version of Unity from the Unity3D.com \nwebsite.  Note, the download page is usually located at: Unity3D.com/get-unity", 
            "title": "Installing Unity"
        }, 
        {
            "location": "/recipes/#installing-fungus-from-unity-asset-store", 
            "text": "Follow these steps to quickly install Fungus for a Unity project via the Unity Asset Store:    Create a new Unity 2D project.    Open the Asset Store window.    Navigate to:  Editor Extensions | Game Toolkis | Visual Novels  (or search for Fungus!).       On the Fungus details page click the Import button, (the first time you download Fungus you'll be asked to agree to the MIT open source licence):       Choose to import all contents from this package.       You should now see a Fungus folder in your Project panel, containing both the Fungus flowcharting features themselves, as well as some sample scenes to get you started:", 
            "title": "Installing Fungus - from Unity Asset store"
        }, 
        {
            "location": "/recipes/#installing-fungus-from-fungus-package", 
            "text": "Follow these steps to quickly install Fungus for a Unity project:    Download the latest version of the Fungus unitypackage from the  FungusGames.com  website.    Create a new Unity 2D project.    Import the Fungus unitypackage by choosing menu:  Assets | Import Package | Custom Package... , and then navigating to your downloaded file location.          Choose to import all contents from this package.      You should now see a Fungus folder in your Project panel, containing both the Fungus flowcharting features themselves, as well as some sample scenes to get you started:", 
            "title": "Installing Fungus - from Fungus package"
        }, 
        {
            "location": "/recipes/#opening-and-docking-the-flowchart-window", 
            "text": "You'll need the Fungus Flowchart window when working with Fungus. Open and dock this window somewhere handy by following these steps:    Choose menu:  Tools | Fungus | Flowchart Window        Drag-and-drop the Flowchart window to the location you wish to dock it:       The Flowchart window is now docked and part of your Unity window layout:", 
            "title": "Opening and docking the Flowchart window"
        }, 
        {
            "location": "/recipes/#finding-the-example-folders-and-scene-files", 
            "text": "Two folders are created when you install Fungus, the Fungus features themeslves (in folder 'Fungus') and a set of examples (in folder 'FungusExamples').  Examples include Drag and Drop, Sherlock and Fungus Town:    You can use the left-hand side of the Unity Project window to explore each example folder:    Alternatively, you can 'filter' the Project view to show all scenes (and no other files) by clicking the scene filter icon to the right of the search bar:    You can cancel the filter by clicking the 'x' in the search bar:", 
            "title": "Finding the example folders and scene files"
        }, 
        {
            "location": "/recipes/#loading-and-playing-the-example-scenes", 
            "text": "To  load  an example scene, double click the desired example's scene object in the Projet window, and the scene should load. For example, this screenshot shows the scene and Flowchart windows when the DragAndDrop example scene has been loaded:    To  run  the currently loaded scene (i.e. to entery  Play-mode ), click the Unity 'play' triangle button at the center top of the Unity application window, and then do whatever makese sense in that scene (e..g click/type text/drag-and-drop objects etc.!):    Note: you click the 'play' button a second time to end  Play-mode .", 
            "title": "Loading and playing the example scenes"
        }, 
        {
            "location": "/recipes/#changes-made-during-playmode-dont-persist", 
            "text": "As with all Unity projects, you can  change  the properties of gameObjects while a scene is running, but these changes are 'ephemeral' - they only last while the scene is running. As soon as you end play mode the properties of all objects in the Hierarchy will revert to those saved in the Scene file.  This makes it easy to 'tweak' values of objects in  Play-mode , and then when the desired behaviour is achieved, those values can be set for the saved scene properties.  Values set when Unity is in  Edit-mode  will be saved when you saved your scene ( CTRL-S  /  Command-S , or menu:  File | Save Scene ).", 
            "title": "Changes made during playmode don't persist"
        }, 
        {
            "location": "/recipes/#change-your-preferences-to-highlight-play-mode", 
            "text": "Sometimes we can forget we are in Unity  Play-mode , and then make changes to Hierarchy gameObject values that are then 'fogotton' when we do stop playing the scene. A good way to avoid this problem is to to set a 'tint' to the Unity editor to make it visually very clear to us when we are in  Play-mode . To add a tint to  Play-mode  do the following:    Open the Unity preferences dialog by choosing menu:  File | Preferences ...    Select the  Colors  preferences, and choose a light colored tint (we chose a light green in this case):       Close the dialog (changes are saved automatically).    When you next enter  Play-mode  you'll see most of the Unity Editor windows turn green (apart from the Game and Flowchart windows):", 
            "title": "Change your preferences to highlight Play-mode"
        }, 
        {
            "location": "/recipes/#creating-naming-and-saving-a-new-scene-from-scratch", 
            "text": "To create a new scene in Unity do the following:    Choose menu:  File | New Scene    Note: if you have any unsaved changes for the current scene you need to either save or abandon them before a new scene can be created.    You should now have a shiny new scene, with a Hiearchy containing just one gameObject, a Main Camera. The new scene will have been give the default name \"Untitled\", which you can see in the title of the Application window:       Good practice is to save your scene (in the right place, with the right name), before creating your work in the scene. Let's save this scene in the root of our project \"Assets\" folder, naming it \"demo1\". First choose menu:  File | Save Scene As...    Choose the location and name (we'll choose folders \"Assets\" and scene name \"demo1\"):       Once you have successfully saved the scene you should now see the new scene file \"demo1\" in your Assets folder in the Project window, and you should also see in the Application window title that you are currently editing the scene named \"demo1\":", 
            "title": "Creating, naming and saving a new scene from scratch"
        }, 
        {
            "location": "/recipes/#menu-tools-fungus", 
            "text": "The core Fungus operations are available from the Unith  Tools  menu.  Choose menu:  Tools | Fungus  to see the options availble:    As can be seen, there are 2 submenus,  Create  and  Utilities , plus the  Flowchart Window  action (which reveals the window if already open, or opens a new window if the Flowchart window was not previously opened).  Menu: Tools | Fungus | Create  The Fungus Tools  Create  submenu offers the following actions:    Menu: Tools |  Fungus | Utilities  The Fungus Tools  Utilties  submenu offers the following actions:", 
            "title": "Menu: Tools | Fungus"
        }, 
        {
            "location": "/recipes/#create-a-flowchart", 
            "text": "To create a Fungus Flowchart do the following:    Choose menu:  Tools | Fungus | Create Flowchart        A new  Flowchart  gameObject should appear in the Hierarchy window.       Select the  Flowchart  gameObject in the Hierarchy window, and you'll see the  Flowchart's  properties in the Inspector Window:       If you have not already displayed the Flowchart Window, you can do so by clicking the Flowchart Window button in the Inspector.    As you can see, when a new Flowchat is created a single command Block named \"New Block\" is automatically created, with the Event handler \"Game Started\" (so it will start executing Fungus commands as soon as the scene goes into  Play Mode ).", 
            "title": "Create a Flowchart"
        }, 
        {
            "location": "/recipes/#flowchart-block-property-viewing-and-editing", 
            "text": "Let's change the name of the default command Block of a new Flowchart in the Flowchart window to \"hello\". Do the following:    Create a new Fungus Flowchart (if you haven't already done so).    Click to select the Block in the Flowchart window (when multiple blocks are present, the selected one gets a green highlight border).    In the Inspector change the text for the Block Name property to \"hello\". You should see the Block name change in the Flowchart window:", 
            "title": "Flowchart Block property viewing and editing"
        }, 
        {
            "location": "/recipes/#add-a-say-command", 
            "text": "To add a \"Say\" command to a Block do the following:    (setup) Create a new scene, add a Fungus Flowchart to the scene.    Ensure the Block is selected, and you can see its properties in the Inspector, and ensure the name of the Block is \"hello\".    Click the Plus button in the bottom half of the Inspector window, to add a new Command to the Block's properties:       Choose menu:  Narrative | Say :       Since this Block only has one Command, that command is automatically selected (shown with a green highlght).    In the \"Story Text\" textbox in the bottom half of the Inspector window type in \"hello Fugus world\":       Run the scene, and see Fungus create a dialog window, and output the text contents of your Say command:", 
            "title": "Add a Say command"
        }, 
        {
            "location": "/recipes2/", 
            "text": "Having got up and running, here are some next steps to get to know what you can do with Fungus.\n\n\n\n\n\nAdding Characters, for use in Say commands\n\n\nWe can assocaited words spoken by the Say Command with a particular Character. Consider the following Tom and Jerry scene:\n\n\n[Tom] Where is that mouse?\n[Jerry] Where is that cat?\n[Tom] Aha...\n[Jerry] Arrrrggggggg!!!!!!!\n\n\n\n\nTo implement the above in Fungus we need to create and name two Characters. Do the following:\n\n\n\n\n\n\n(setup) Create a new scene, add a Fungus Flowchart to the scene, and select the Block in the Flowchart.\n\n\n\n\n\n\nRename the Flowchart Block \"cat and mouse\".\n\n\n\n\n\n\nChoose menu:\n\nTools | Fungus | Create | Character\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou should now see a new gameObject \"Character\" in the Hierarchy window, named Character.\n\n\n\n\n\n\n\n\n\n\n\n\n\nEnsure gameObject \"Character\" is selected, and edit its properties in the Inspector. Rename the gameObject to \"Character1 - Tom\", then in its Character (Script) component set the Name Text to \"Tom\" and the Name Color to red:\n\n\n\n\n\n\n\n\n\n\n\n\n\nRepeat the previous two steps to create a second character \"Character2 - Jerry\", then in its Character (Script) component set the Name Text to \"Jerry\" and the Name Color to blue:\n\n\n\n\n\n\n\n\n\n\n\n\n\nNow we have our two character gameObjects, we can assign them to any Say commands as appropriate.\n\n\n\n\n\n\nCreate a Say Command for Tom, with text \"Where is that mouse?\", setting the Character of this Say command to \"Character1 - Tom\":\n\n\n\n\n\n\n\n\n\n\n\n\n\nRepeat the above step for the 3 remaining statements, for:\n\n\n\n\nJerry \"Where is that cat?\"\n\n\nTom \"Aha...\"\n\n\nJerry \"Arrrrggggggg!!!!!!!\"\n\nAssigning the appropriate Character for each Say Command from the menu of Character gameObjects in the Hiearchy.\n\n\n\n\n\n\n\n\nYou should now have a sequence of 4 Say commands in your Block:\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhen you run the scene you should see a sequence of statements, clearly showing who is saying what - both the character name is given, and also that name is coloured according to the properties we set for the character gameObjects (red for Tom, and blue for Jerry):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nListing portrait image(s) for use by Characters\n\n\nIf you add one or more portrait images to a character, then each Say command for that character can define which of those portrait images should be displayed, alongside the (colored) name of the Character.\n\n\nTo add portrait images to a character do the following:\n\n\n\n\n\n\n(setup) Create a new scene, add a Fungus Flowchart to the scene, and select the Block in the Flowchart.\n\n\n\n\n\n\nRename the Flowchart Block \"The case of the missing violin\".\n\n\n\n\n\n\nCreate a character, and in the Inspector give your character Name Text (we chose \"Sherlock\") and a name color.\n\n\n\n\n\n\nNow in the Inspector click the Add Portrait button (the plus-sign \"+\"), to get a 'slot' into which to add a portrait image:\n\n\n\n\n\n\n\n\n\n\n\n\n\nDrag the appropriate image into your new portrait image slot (in this screenshot we used the 'condident' image from the Sherlock example project). Also set the direction that the image is facing (left / front / right):\n\n\n\n\n\n\n\n\n\n\n\n\n\nCreate a second character (e.g. John, using Name Color blue, and portrait image 'annoyed').\n\n\n\n\n\n\nNow select your Block in the Fungus Flowchart, so you can add some Commands to be executed...\n\n\n\n\n\n\nCreate a Say command, for your Sherlock Character, saying \"Waston, have you seen my violin?\" and choosing portrait 'confident' (since this is the only we added to the Character):\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdd a second Say command, this time for Character John, saying \"No, why don't you find it yourself using your amazing powers of deduction...\" and choosing the 'annoyed' portrait for John.\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhen you run the scene you should see a sequence of statements, clearly showing who is saying both with (colored) name text AND also the portrait image you selected for each Say command:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAs you can see in some of the Fungus Example projects, many games will have a wide range of different portrait images for each character, to allow a full range of visual expression of emotion to support the text of Say commands:\n\n\n\n\n\n\n\n\n\n\n\n\nAdd a Stage\n\n\nPortrait images can be used in two ways in Fungus.\n\n\n\n\nThey can be shown as part of the \nSay\n commands in the Say Dialog.\n\n\nAlternatively Portraits can be displayed and moved around the screen inside Fungus \nStages\n, using the Portrait Command.\n\n\n\n\nCreate a simple stage that covers the whole game Window as follows:\n\n\n\n\n\n\n(setup) Create a new scene, add a Fungus Flowchart to the scene, and select the Block in the Flowchart.\n\n\n\n\n\n\nRename the Flowchart Block \"stage demo\".\n\n\n\n\n\n\nCreate a Fungus Stage gameObject in the scene by choosing menu:\n\nTools | Fungus | Create | Stage\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou should now see a new gameObject \"Stage\" added to the scene Hierarchy.\n\n\n\n\n\n\nIf you select it you will see its properties in the Inspector. We can leave the default settings, since these are for the stage to cover the whole Game window. There are some child gameObjects inside the Stage, but you don't need to worry about these unless you are doing some advanced customisation of stages for a particular game effect.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNow you have added a Fungus Stage to your scene, you will be able to make large Portrait images appear / move in-out of the screen using the \nPortrait\n Command in Fungus Flowchart Blocks...\n\n\n\n\n\nDisplaying Portrait images on stages with the Portrait command\n\n\nOnce you have a Fungus Stage, and a character then you can instruct Fungus to display / move onscreen the Character Portrait images. To make character images appear as part of a scene do the following:\n\n\n\n\n\n\n(setup) Create a new scene, add a Fungus Flowchart to the scene, and select the Block in the Flowchart.\n\n\n\n\n\n\nRename the Flowchart Block \"sherlock enters dramatically\".\n\n\n\n\n\n\nCreate a Fungus Stage gameObject in the scene by choosing menu:\n\nTools | Fungus | Create | Stage\n.\n\n\n\n\n\n\nCreate a new character, name the gameObject \"Character1 - Sherlock\", set the Name Text to \"sherlock\" and the Name Color to green. Add to this character a portrait (we used the sherlock-confident image from the Fungus Example project \"Sherlock\"). And set the image facing to the appropriate side (in our case: left):\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdd a Portrait Command by clicking the Add Command button (the plus-sign \"+\"), then choosing menu:\n\n\n\nNarrative | Portrait\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou will now see your new Portrait command in the top half of the Inspector, and its command properties in the bottom half of the Inspector. Note the red exclamation mark at the right of the highlighed (green) commant row - this indicated when a command has one or more required properties that have not been set. We see the error message \n\"No character selected\"\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\nSet the portrait's character to \"Character1 - sherlock\", and set the following properties:\n\n\n\n\nPortrait: confident\n\n\nFacing: \n-- (left)\n\n\nMove: Yes (check the checkbox)\n\n\nFrom Position: Offscreen Right\n\n\nTo Position: Right\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhen you run the scene, the Sherlock portrait image should move into view having started from Offscreen - Right. The image stops when it gets to about a third the way onto the screen:\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote, a common Command flow sequence is:\n\n\n\n\nto have a character enter on screen (Portrait command),\n\n\nthen have that character say something (Say command),\n\n\nthen have another character enter the screen (Portrait command),\n\n\nand then that second character says something (Say command).\n\n\n\n\nHere is just such a sequence for the \"Case of the missing violin\" two-sentence scenario explored in the recipe to learning how to create Fungus Characters (recipe: Listing portrait image(s) for use by Characters):\n\n\n\n\n\n\n\n\nHere we see the Play Mode user experience of the output of running such a workflow:\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe can also see that the character that is Say'ing something, has a WHITE-outline around its Stage portrait, to visually reinforce to the user which character is speaking at any point in time...\n\n\n\n\n\nPlay some music\n\n\nMusic sound clips loop, so they are restarted once they have finished playing. Often the first Command in a Block is a \nPlay Music\n Command. Add music to a Block as follows:\n\n\n\n\n\n\n(setup) Create a new scene, add a Fungus Flowchart to the scene, and select the Block in the Flowchart.\n\n\n\n\n\n\nAdd a Play Music Command to the current Block by clicking the Add Command (plus-sign \"+\" button) in the Inspector, and then choosing menu: \nAudio | Play Music\n.\n\n\n\n\n\n\nEnsure the Play Music command is selected (green highlight) in the top of the Inspector, and then drag the desired music clip file into the \"Music Clip\" propertyin the bottom half of the Inspector:\n\n\n\n\n\n\n\n\n\n\n\n\n\nChange the volume as desired\n\n(the default is 1, values are between 0.0 and 1.0, representing percentages of volume from 0% - 100%).\n\n\n\n\n\n\nPlay your scene - the music clip should play, and keep looping.\n\n\n\n\n\n\nNOTE: If you wish to start playing the music clip from a known timepoint (rather than from the beginning), then enter the desired timepoint in the Inspector property \"At Time\" for your Play Music command.\n\n\n\n\n\nAdd menu commands to branch to other blocks\n\n\nLet's modify our \"hello\" Say command above to ask a tricky mathematical quesiton, and demonsrate the Menu command by offering the user a choce been \"correct' and \"incorrect\" answers.  Menu commands transfer control to another block - so we'll need to add 2 new blocks to correspond to the 2 answers.\nDo the following:\n\n\n\n\n\n\n(setup) Create a new scene, add a Fungus Flowchart to the scene, and select the Block in the Flowchart.\n\n\n\n\n\n\nRename the Block in the Flowchart to \"hello\".\n\n\n\n\n\n\nCreate a Say command, with \nStory Text\n to ask the question: \"Is 2 + 2?\".\n\n\n\n\n\n\nUncheck the \"Wait For Click\" checkbox (this is so we see the menu options immediately after the Say command has displayed the question):\n\n\n\n\n\n\n\n\n\n\n\n\n\nCreate a new Block, named \"Correct\" which contains a \nSay\n command with the text \"Well done, you are very mathematical!\". Click the plus-sign button in the Flowchart window to add a new Block to the Flowchart, rename it \"Correct\" and then add that Say command:\n\n\n\n\n\n\n\n\n\n\n\n\n\nSelect the \"hello\" block, and add a Menu command by clicking the plus-sign add Command button in the Inspector and then choosing menu: \nNarrative | Menu\n.\n\n\n\n\n\n\n\n\n\n\n\n\n\nWith this new Menu command selected (green) in the top half of the Inspector window, set the \nText\n to \"Yes\" and the \nTarget Block\n to your new \"Correct\" block:\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou should now see how the 'flow' of commands can change from Block \"hello\" to Block \"correct\" in the Flowchart window:\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdd a second new Block named \"Wrong\", containing a Say command with text \"Bad luck, perhaps consider a non-mathematical career path...\"\n\n\n\n\n\n\n\n\n\n\n\n\n\nNow we need to add another Menu command to our \"hello\" block, offering the user the \"No\" answer to our maths question, and passing control to Block \"Wrong\" if they disagree that 2 + 2 = 4. Select the \"hello\" block, and add a Menu command. With this new Menu command selected (green) in the top half of the Inspector window, set the \nText\n to \"No\" and the \nTarget Block\n to your new \"Wrong\" block.\n\n\n\n\n\n\nYou should now see in the Flowchart window how block \"hello\" can pass control to either block \"Correct\" or Block \"Wrong\" - depending on which menu answer the user selects.\n\n\n\n\n\n\n\n\n\n\n\n\n\nRun the scene, and you should see the Say question appear at the bottom of the screen, and also the two Menu buttons \"Yes\" and \"No\" in the middle of the screen. Clicking \"Yes\" then runs the \"Correct\" Block's commands, and clicking \"No\" runs the \"Wrong\" block's commands:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nChange Camera background colour\n\n\nUnity cameras determine what the user sees when a scene is running. When nothing is present in all or part of the camera's rectangle a solid \"Background\" colour is displayed. Unity cameras have a default Background of a medium dark blue colour. You can change this as follows:\n\n\n\n\n\n\n(setup) Create a new 2D scene, unless you already have a scene with which to work.\n\n\n\n\n\n\nSelect the Main Camera in the Hierarchy.\n\n\n\n\n\n\nIn the Inspector for the Camera component, click and choose a different value for the Background property - often black works well.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNow when any part of the camera rectangle (frustrum) shows no gameOjects then your custom Background colour will be what the user sees.\n\n\n\n\n\n\n\n\n\nAdd a background sprite\n\n\nTo add any sprite image file from your Unity Project folder into the current scene, simply drag a reference to the sprite image file from the Project window onto the Scene window, and rotate / resize desired. The sprite will appear as a new gameObject (with same name as Sprite Project image file) in the Hierarchy window:\n\n\n\n\n\n\n\nNOTE: You may not be able to see the sprite, because what we see depends on the current settings for the camera. What the camera shows, how it moves etc. can be controlled by Fungus Views and Commmands relating to Views.\n\n\n\n\n\nAdding and customising a view\n\n\nWhat the main camera of a scene displays to the user, and how it moves etc. can be controlled by Fungus Views and Fungus Commmands relating to Views. A Fungus View is a special gameObject in the Hierarchy, it appears as a green outlined inner rectangle, with two filled green rectangles on the left and the right. The ratio of the outlined inner rectangle is 4:3. The ratio of the outer rectangle (which includes the two filled green left and right rectangles) is 16:9. These two ratios cover almost every common phone, tablet and computer screen width-to-height ratio. So arranging the view so that a background Sprite image looks good for both inner- and outer- rectangles of a view, pretty much ensures your game will look good on any device. Setting the background color of the camera to something like black also means on the rare device that has an odd ratio showing content outside of the view outer rectangle, the game should still look perfectly acceptable.\n\n\nTo add a view to the current scene do the following:\n\n\n\n\n\n\n(setup) Create / Edit a scene that has a Sprite background image gameObject\n\n\n\n\n\n\nChoose menu: \nTools | Fungus | Create | View\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\nRename this View as \"View1\".\n\n\n\n\n\n\nUse the two white squares to resize the view (it maintains its proportions). Use the center square outline, or vertical and horizontal arrows to move the View around the Scene window.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEnsure the View is selected in the Hierarchy, then position the view so that it is approximately centered on your background sprite image\n\n\n\n\n\n\nResize (and if necessary reposition) the View to be as big as possible, but ensuring that its outer rectangle stays within the bounds of the background sprite. (Note we've tinted the Sprite red so the green View rectangles can be more easily seen in this screenshot):\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote: You can also rotate the view with the Unity Rotate tool\n\n\n\n\n\n\nNOTE: Utnil you add a \"Fade To View\" Fungus command, you still may not see the Sprite in the Game window when the scene plays, since the Main Camera has not been oriented to resize and align with the view.\n\n\n\n\n\nAdd a Fade To View command\n\n\nOnce you have a Scene that contains some background Sprites and Fungus Views, you are ready to use the Fungus camera related Commands to control what the user sees. The simpest camera control is to make the Game window fade from a solid colour to the Main Camera being sized, positioned (and if necessary rotated) to show a specified Fungus View. Do the following:\n\n\n\n\n\n\n(setup) Create / being editing a Scene containing a backgrond Sprite image, and a Fungus View that has been positioned to show all / some of the Sprite.\n\n\n\n\n\n\nIn the Fungus Flowchart rename the Block \"Camera Control\".\n\n\n\n\n\n\nAdd a new \"Fade to View\" Command to the Block. First click the Plus button in the bottom half of the Inspector window, to add a new Command, then choose menu: \nCamera | Fade To View\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\nNow Drag \"View1\" from the Hierarchy window into the \"Target View\" property of the Fade to View Command  in the Inspector:\n\n\n\n\n\n\n\n\n\n\n\n\n\n(We'll keep the defaults of 1 second and fade From Color of black).\n\n\n\n\n\n\nWhen you run the Scene the Game window should start off solid black, and then slowly the background Sprite image within the View rectangle should fade into view.\n\n\n\n\nNow Drag \"View1\" from the Hierarchy window into the", 
            "title": "Recipes - next steps"
        }, 
        {
            "location": "/recipes2/#adding-characters-for-use-in-say-commands", 
            "text": "We can assocaited words spoken by the Say Command with a particular Character. Consider the following Tom and Jerry scene:  [Tom] Where is that mouse?\n[Jerry] Where is that cat?\n[Tom] Aha...\n[Jerry] Arrrrggggggg!!!!!!!  To implement the above in Fungus we need to create and name two Characters. Do the following:    (setup) Create a new scene, add a Fungus Flowchart to the scene, and select the Block in the Flowchart.    Rename the Flowchart Block \"cat and mouse\".    Choose menu: Tools | Fungus | Create | Character :       You should now see a new gameObject \"Character\" in the Hierarchy window, named Character.       Ensure gameObject \"Character\" is selected, and edit its properties in the Inspector. Rename the gameObject to \"Character1 - Tom\", then in its Character (Script) component set the Name Text to \"Tom\" and the Name Color to red:       Repeat the previous two steps to create a second character \"Character2 - Jerry\", then in its Character (Script) component set the Name Text to \"Jerry\" and the Name Color to blue:       Now we have our two character gameObjects, we can assign them to any Say commands as appropriate.    Create a Say Command for Tom, with text \"Where is that mouse?\", setting the Character of this Say command to \"Character1 - Tom\":       Repeat the above step for the 3 remaining statements, for:   Jerry \"Where is that cat?\"  Tom \"Aha...\"  Jerry \"Arrrrggggggg!!!!!!!\" Assigning the appropriate Character for each Say Command from the menu of Character gameObjects in the Hiearchy.     You should now have a sequence of 4 Say commands in your Block:       When you run the scene you should see a sequence of statements, clearly showing who is saying what - both the character name is given, and also that name is coloured according to the properties we set for the character gameObjects (red for Tom, and blue for Jerry):", 
            "title": "Adding Characters, for use in Say commands"
        }, 
        {
            "location": "/recipes2/#listing-portrait-images-for-use-by-characters", 
            "text": "If you add one or more portrait images to a character, then each Say command for that character can define which of those portrait images should be displayed, alongside the (colored) name of the Character.  To add portrait images to a character do the following:    (setup) Create a new scene, add a Fungus Flowchart to the scene, and select the Block in the Flowchart.    Rename the Flowchart Block \"The case of the missing violin\".    Create a character, and in the Inspector give your character Name Text (we chose \"Sherlock\") and a name color.    Now in the Inspector click the Add Portrait button (the plus-sign \"+\"), to get a 'slot' into which to add a portrait image:       Drag the appropriate image into your new portrait image slot (in this screenshot we used the 'condident' image from the Sherlock example project). Also set the direction that the image is facing (left / front / right):       Create a second character (e.g. John, using Name Color blue, and portrait image 'annoyed').    Now select your Block in the Fungus Flowchart, so you can add some Commands to be executed...    Create a Say command, for your Sherlock Character, saying \"Waston, have you seen my violin?\" and choosing portrait 'confident' (since this is the only we added to the Character):       Add a second Say command, this time for Character John, saying \"No, why don't you find it yourself using your amazing powers of deduction...\" and choosing the 'annoyed' portrait for John.       When you run the scene you should see a sequence of statements, clearly showing who is saying both with (colored) name text AND also the portrait image you selected for each Say command:        As you can see in some of the Fungus Example projects, many games will have a wide range of different portrait images for each character, to allow a full range of visual expression of emotion to support the text of Say commands:", 
            "title": "Listing portrait image(s) for use by Characters"
        }, 
        {
            "location": "/recipes2/#add-a-stage", 
            "text": "Portrait images can be used in two ways in Fungus.   They can be shown as part of the  Say  commands in the Say Dialog.  Alternatively Portraits can be displayed and moved around the screen inside Fungus  Stages , using the Portrait Command.   Create a simple stage that covers the whole game Window as follows:    (setup) Create a new scene, add a Fungus Flowchart to the scene, and select the Block in the Flowchart.    Rename the Flowchart Block \"stage demo\".    Create a Fungus Stage gameObject in the scene by choosing menu: Tools | Fungus | Create | Stage :       You should now see a new gameObject \"Stage\" added to the scene Hierarchy.    If you select it you will see its properties in the Inspector. We can leave the default settings, since these are for the stage to cover the whole Game window. There are some child gameObjects inside the Stage, but you don't need to worry about these unless you are doing some advanced customisation of stages for a particular game effect.       Now you have added a Fungus Stage to your scene, you will be able to make large Portrait images appear / move in-out of the screen using the  Portrait  Command in Fungus Flowchart Blocks...", 
            "title": "Add a Stage"
        }, 
        {
            "location": "/recipes2/#displaying-portrait-images-on-stages-with-the-portrait-command", 
            "text": "Once you have a Fungus Stage, and a character then you can instruct Fungus to display / move onscreen the Character Portrait images. To make character images appear as part of a scene do the following:    (setup) Create a new scene, add a Fungus Flowchart to the scene, and select the Block in the Flowchart.    Rename the Flowchart Block \"sherlock enters dramatically\".    Create a Fungus Stage gameObject in the scene by choosing menu: Tools | Fungus | Create | Stage .    Create a new character, name the gameObject \"Character1 - Sherlock\", set the Name Text to \"sherlock\" and the Name Color to green. Add to this character a portrait (we used the sherlock-confident image from the Fungus Example project \"Sherlock\"). And set the image facing to the appropriate side (in our case: left):       Add a Portrait Command by clicking the Add Command button (the plus-sign \"+\"), then choosing menu:  Narrative | Portrait :       You will now see your new Portrait command in the top half of the Inspector, and its command properties in the bottom half of the Inspector. Note the red exclamation mark at the right of the highlighed (green) commant row - this indicated when a command has one or more required properties that have not been set. We see the error message  \"No character selected\" :       Set the portrait's character to \"Character1 - sherlock\", and set the following properties:   Portrait: confident  Facing:  -- (left)  Move: Yes (check the checkbox)  From Position: Offscreen Right  To Position: Right        When you run the scene, the Sherlock portrait image should move into view having started from Offscreen - Right. The image stops when it gets to about a third the way onto the screen:       Note, a common Command flow sequence is:   to have a character enter on screen (Portrait command),  then have that character say something (Say command),  then have another character enter the screen (Portrait command),  and then that second character says something (Say command).   Here is just such a sequence for the \"Case of the missing violin\" two-sentence scenario explored in the recipe to learning how to create Fungus Characters (recipe: Listing portrait image(s) for use by Characters):     Here we see the Play Mode user experience of the output of running such a workflow:       We can also see that the character that is Say'ing something, has a WHITE-outline around its Stage portrait, to visually reinforce to the user which character is speaking at any point in time...", 
            "title": "Displaying Portrait images on stages with the Portrait command"
        }, 
        {
            "location": "/recipes2/#play-some-music", 
            "text": "Music sound clips loop, so they are restarted once they have finished playing. Often the first Command in a Block is a  Play Music  Command. Add music to a Block as follows:    (setup) Create a new scene, add a Fungus Flowchart to the scene, and select the Block in the Flowchart.    Add a Play Music Command to the current Block by clicking the Add Command (plus-sign \"+\" button) in the Inspector, and then choosing menu:  Audio | Play Music .    Ensure the Play Music command is selected (green highlight) in the top of the Inspector, and then drag the desired music clip file into the \"Music Clip\" propertyin the bottom half of the Inspector:       Change the volume as desired (the default is 1, values are between 0.0 and 1.0, representing percentages of volume from 0% - 100%).    Play your scene - the music clip should play, and keep looping.    NOTE: If you wish to start playing the music clip from a known timepoint (rather than from the beginning), then enter the desired timepoint in the Inspector property \"At Time\" for your Play Music command.", 
            "title": "Play some music"
        }, 
        {
            "location": "/recipes2/#add-menu-commands-to-branch-to-other-blocks", 
            "text": "Let's modify our \"hello\" Say command above to ask a tricky mathematical quesiton, and demonsrate the Menu command by offering the user a choce been \"correct' and \"incorrect\" answers.  Menu commands transfer control to another block - so we'll need to add 2 new blocks to correspond to the 2 answers.\nDo the following:    (setup) Create a new scene, add a Fungus Flowchart to the scene, and select the Block in the Flowchart.    Rename the Block in the Flowchart to \"hello\".    Create a Say command, with  Story Text  to ask the question: \"Is 2 + 2?\".    Uncheck the \"Wait For Click\" checkbox (this is so we see the menu options immediately after the Say command has displayed the question):       Create a new Block, named \"Correct\" which contains a  Say  command with the text \"Well done, you are very mathematical!\". Click the plus-sign button in the Flowchart window to add a new Block to the Flowchart, rename it \"Correct\" and then add that Say command:       Select the \"hello\" block, and add a Menu command by clicking the plus-sign add Command button in the Inspector and then choosing menu:  Narrative | Menu .       With this new Menu command selected (green) in the top half of the Inspector window, set the  Text  to \"Yes\" and the  Target Block  to your new \"Correct\" block:       You should now see how the 'flow' of commands can change from Block \"hello\" to Block \"correct\" in the Flowchart window:       Add a second new Block named \"Wrong\", containing a Say command with text \"Bad luck, perhaps consider a non-mathematical career path...\"       Now we need to add another Menu command to our \"hello\" block, offering the user the \"No\" answer to our maths question, and passing control to Block \"Wrong\" if they disagree that 2 + 2 = 4. Select the \"hello\" block, and add a Menu command. With this new Menu command selected (green) in the top half of the Inspector window, set the  Text  to \"No\" and the  Target Block  to your new \"Wrong\" block.    You should now see in the Flowchart window how block \"hello\" can pass control to either block \"Correct\" or Block \"Wrong\" - depending on which menu answer the user selects.       Run the scene, and you should see the Say question appear at the bottom of the screen, and also the two Menu buttons \"Yes\" and \"No\" in the middle of the screen. Clicking \"Yes\" then runs the \"Correct\" Block's commands, and clicking \"No\" runs the \"Wrong\" block's commands:", 
            "title": "Add menu commands to branch to other blocks"
        }, 
        {
            "location": "/recipes2/#change-camera-background-colour", 
            "text": "Unity cameras determine what the user sees when a scene is running. When nothing is present in all or part of the camera's rectangle a solid \"Background\" colour is displayed. Unity cameras have a default Background of a medium dark blue colour. You can change this as follows:    (setup) Create a new 2D scene, unless you already have a scene with which to work.    Select the Main Camera in the Hierarchy.    In the Inspector for the Camera component, click and choose a different value for the Background property - often black works well.       Now when any part of the camera rectangle (frustrum) shows no gameOjects then your custom Background colour will be what the user sees.", 
            "title": "Change Camera background colour"
        }, 
        {
            "location": "/recipes2/#add-a-background-sprite", 
            "text": "To add any sprite image file from your Unity Project folder into the current scene, simply drag a reference to the sprite image file from the Project window onto the Scene window, and rotate / resize desired. The sprite will appear as a new gameObject (with same name as Sprite Project image file) in the Hierarchy window:    NOTE: You may not be able to see the sprite, because what we see depends on the current settings for the camera. What the camera shows, how it moves etc. can be controlled by Fungus Views and Commmands relating to Views.", 
            "title": "Add a background sprite"
        }, 
        {
            "location": "/recipes2/#adding-and-customising-a-view", 
            "text": "What the main camera of a scene displays to the user, and how it moves etc. can be controlled by Fungus Views and Fungus Commmands relating to Views. A Fungus View is a special gameObject in the Hierarchy, it appears as a green outlined inner rectangle, with two filled green rectangles on the left and the right. The ratio of the outlined inner rectangle is 4:3. The ratio of the outer rectangle (which includes the two filled green left and right rectangles) is 16:9. These two ratios cover almost every common phone, tablet and computer screen width-to-height ratio. So arranging the view so that a background Sprite image looks good for both inner- and outer- rectangles of a view, pretty much ensures your game will look good on any device. Setting the background color of the camera to something like black also means on the rare device that has an odd ratio showing content outside of the view outer rectangle, the game should still look perfectly acceptable.  To add a view to the current scene do the following:    (setup) Create / Edit a scene that has a Sprite background image gameObject    Choose menu:  Tools | Fungus | Create | View :       Rename this View as \"View1\".    Use the two white squares to resize the view (it maintains its proportions). Use the center square outline, or vertical and horizontal arrows to move the View around the Scene window.          Ensure the View is selected in the Hierarchy, then position the view so that it is approximately centered on your background sprite image    Resize (and if necessary reposition) the View to be as big as possible, but ensuring that its outer rectangle stays within the bounds of the background sprite. (Note we've tinted the Sprite red so the green View rectangles can be more easily seen in this screenshot):       Note: You can also rotate the view with the Unity Rotate tool    NOTE: Utnil you add a \"Fade To View\" Fungus command, you still may not see the Sprite in the Game window when the scene plays, since the Main Camera has not been oriented to resize and align with the view.", 
            "title": "Adding and customising a view"
        }, 
        {
            "location": "/recipes2/#add-a-fade-to-view-command", 
            "text": "Once you have a Scene that contains some background Sprites and Fungus Views, you are ready to use the Fungus camera related Commands to control what the user sees. The simpest camera control is to make the Game window fade from a solid colour to the Main Camera being sized, positioned (and if necessary rotated) to show a specified Fungus View. Do the following:    (setup) Create / being editing a Scene containing a backgrond Sprite image, and a Fungus View that has been positioned to show all / some of the Sprite.    In the Fungus Flowchart rename the Block \"Camera Control\".    Add a new \"Fade to View\" Command to the Block. First click the Plus button in the bottom half of the Inspector window, to add a new Command, then choose menu:  Camera | Fade To View :       Now Drag \"View1\" from the Hierarchy window into the \"Target View\" property of the Fade to View Command  in the Inspector:       (We'll keep the defaults of 1 second and fade From Color of black).    When you run the Scene the Game window should start off solid black, and then slowly the background Sprite image within the View rectangle should fade into view.   Now Drag \"View1\" from the Hierarchy window into the", 
            "title": "Add a Fade To View command"
        }, 
        {
            "location": "/audio/", 
            "text": "Audio in Fungus games\n\n\nAlmost every game benefits from some sound! Often we categories audio clips into three kinds:\n\n\n\n\nMusic\n\n\nSound effects\n\n\nSpeech\n\n\n\n\nFungus provides straightforward ways to include all 3 kinds of audio clip in your game, using the techniques presented here.\n\n\n\n\n\nSources of free to use audio clips and music\n\n\nBefore you can \nadd\n audio clips to a game you need to get some audio clips. Here are some sources of audio clips to use when learning about audio in Fungus, in case you don't have some of your own to hand.\n\n\nThe following are some good places online to fine music and sound effects for games. Some are free for any use (including commerical), some are just free for personal use. As always, check the licence of media assets before using them for any commerical products ...\n\n\n\n\nFreesound.org\n\n\nlots of creative commons and royalty free sounds at \nSoundBible.com\n\n\na great list of audio sources in peoples answers to questions at \nAnswers.unity3d\n and \nStackOverflow.com\n\n\nmixture of free and paid music sources at \nPixelProspector.com\n\n\n\n\nYou'll find a range of audio clips included inside the Fungus Examples folders:\n\n\n\n\n\n\n\nAdding audio assets to your project\n\n\nOnce you have some audio clips on your computer, you need to import them into your Unity project.\n\n\nMethod 1 (menu)\n\n\nYou can do this one clip at a time, by choosing menu: \nAssets | Import New Asset...\n and navigating to and selecting each clip.\n\n\nMethod 2 (drag-drop)\n\n\nAlternatively you can \ndrag\n files or entire folders into your Unity Project window, and Unity will make a copy of, and then import the dragged files:\n\n\n\n\n\n\n\n\n\n\n\nThree ways to work with audio in Fungus games\n\n\nThere are 3 main ways to work with audio in Fungus games. These are the Audio commands, the Say command, and gameObjects containing Unity Audio Source components. All three are discussed below:\n\n\n\n\n\n\n\n\n\n\nList of Fungus audio commands\n\n\nThe range of audio \nCommands\n you can add to a Block are as follows:\n\n\n\n\n\n\n\nAlso you can declare an audio clip that contains the speech voiceover to correspond to text displayed with a \nSay\n command:\n\n\n\n\n\n\n\n\n\n\nPlay Music command\n\n\nMusic sound clips loop, so they are restarted once they have finished playing. Often the first Command in a Block is a \nPlay Music\n Command. Add music to a Block as follows:\n\n\n\n\n\n\n(if you have not already done so: Create a new scene, add a Fungus Flowchart to the scene, and select the Block in the Flowchart).\n\n\n\n\n\n\nAdd a Play Music Command to the current Block by clicking the Add Command (plus-sign \"+\" button) in the Inspector, and then choosing menu: \nAudio | Play Music\n.\n\n\n\n\n\n\nEnsure the Play Music command is selected (green highlight) in the top of the Inspector, and then drag the desired music clip file into the \"Music Clip\" property in the bottom half of the Inspector:\n\n\n\n\n\n\n\n\n\n\n\n\n\nChange the volume as desired\n\n(the default is 1, values are between 0.0 and 1.0, representing percentages of volume from 0% - 100%).\n\n\n\n\n\n\nPlay your scene - the music clip should play, and keep looping.\n\n\n\n\n\n\nNOTE: If you wish to start playing the music clip from a known time-point (rather than from the beginning), then enter the desired timepoint in the Inspector property \"At Time\" for your Play Music command.\n\n\n\n\n\nPlay Sound command\n\n\nThe Fungus Play Sound Command will play a stated audio clip once. With your Flowchart Block selected, click the Add Command button in the Inspector and choose menu: \nAudio | Play Sound\n. Drag in a sound effect (we chose the BearRoad sound from the Hunter example):\n\n\n\n\n\n\n\nPlay the scene, you should hear your sound effect play once.\n\n\nNote. The default Fungus setting is for the sound effect to start playing, and while it is playing the next Command in the Block will start executing. However, you if you check the \"Wait Until Finished\" checkbox, then Fungus will wait until the sound effect has finished playing, before moving on to execute the next Command in the block:\n\n\n\n\n\n\n\n\n\n\nSet Audio Volume command\n\n\nThe default volume for music being played is 1 (100%). However, we can change this easily with the Set Audio Volume command. Do the following:\n\n\n\n\n\n\n(if you have not already done so: Create a new scene, add a Fungus Flowchart to the scene, and select the Block in the Flowchart).\n\n\n\n\n\n\nRename this Block \"Play Music\".\n\n\n\n\n\n\nAdd a Play Music Command to the current Block, then drag the desired music clip file into the \"Music Clip\" property in the bottom half of the Inspector:\n\n\n\n\n\n\n\n\n\n\n\n\n\nIf you play the scene now, the music will play at full volume (1 = 100%).\n\n\n\n\n\n\nNow create a second Block in the Flowchart window named \"quieter\".\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdd to this new Block a Set Audio Volume Command.\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn the properties of the Set Audio Volume Command set the volume to 0.25 (25%).\n\n\n\n\n\n\n\n\n\n\n\n\n\nSelect the \"Play Music\" block, and add a Menu command by clicking the plus-sign add Command button in the Inspector and then choosing menu: \nNarrative | Menu\n.\n\n\n\n\n\n\n\n\n\n\n\n\n\nSet the Text Property to \"Make Quieter\" and the Target Block to Block \"Quieter\":\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn the Flowchart window you should now see a green arrow, showing that a Command in Block \"Play Music\" passes control to Block \"quieter\":\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhen you run the scene, the music will start playing at full volumne, then when y ou click the \"Make Quieter\" button, controll will pass to the \"quieter\" block, and you'll hear the music become much quieter after the Set Audio Volume Command has been executed with a value of 25% (0.25):\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe 3 Unity audio concepts\n\n\nUnity has 3 different kinds of Audio 'object', that it is worth understanding when working with audio in Fungus (or any other) Unity project:\n\n\n\n\nAudio Clip\n\n\nAudio Listener\n\n\nAudio Source\n\n\n\n\nUnity Audio Clip\n\n\nUnity uses the term Audio \"Clip\" to refer to the physical sound files (.mp3, .wav, .ogg etc.) that are stored in your Project folder. It is these Audio Clip files that you drag and drop into the \"Music Clip\" and \"Sound Clip\" properties in the Inspector Window, when creating Play Music and Play Sound Commands in a Fungus Block.\n\n\nUnity Audio \"Listener\"\n\n\nBasically, if you want sound to be played there must be an Audio Listener component inside one of the gameObjects in your scene. The Main Camera of a scene has one by default, so in most cases you just leave this alone and can rest assured that you have an Audio Listener.\n\n\nIf a scene has no Audio Listener in any gameObject, then no audio will be heard by the user of the game, regardless of how many music and sound clips might be playing.\n\n\nSometimes you may add gameObjects to your scene that contain another Audio Listener component. In this case, Unity will present a warnig message stating that more than 1 Audio Listener is present in the scene. If you see such a message, then its best to resolve this problem by disabling all but one Audio Listener...\n\n\nIf you are working with a 3D game, and/or you wish to present a sophisticated stereo sound experience for your user, then you may need to learn about 3D audio. In such games the 3D \"position\" of the gameObject containing the Audio Listener becomes important - but don't worry about this if you are just getting started with audio in Fungus. For 3D effects the Audio Listener is like an \"electronic ear\", so its location determines things like how loud a sound is played (distance from \"ear\") and left-right stereo balance (which \"side\" audio is to the \"ear\") etc.\n\n\nUnity Audio Source\n\n\nIn Unity the link between an Audio Clip (music/sound) file that we wish to be played, and the Audio Listener in the scene is a Unity Audio Source component of a gameObject. However, in most cases Fungus creates one of these if neeeded, so we don't need to worry about them!\n\n\nHowever, for sophisticated control of music and sound and speech in your game there is the facility to make Fungus have detailed control of Unity Audio Sources. It is an Audio Source component that controls how and when and which part of an audio clip is playing (and whether it should loop or not), and whether it is playing or paused, and when resuming should continue from where paused or restart. The volume of a playing clip can also be controlled by properties of an Audio Source.\n\n\nLearn more about audio in Unity at the \nUnity Manual Audio Page\n.\n\n\n\nControl Audio command\n\n\nThe Fungus Audio Commands cover all common music and sound effect actions, for specialist audio work you may need to access the raw (and complicated) power of Unity audio. The Fungus Command \"Control Audio\" lets Fungus Blocks communicate directly with Unity Audio Source components in any gameObject in the current scene, so your wizard audio team member can do what they need to do with the Unity toolkit, and you can still control playing / looping / volume etc. of the audio in those complex gameObjects.\n\n\nThe Control Audio Command offers five actions that can be communicated to Unity Audio Source components:\n\n\n\n\n\n\n\n\n\nWe'll learn about this with a simple Unity gameObject that plays a bear sound two times, first at full volume and then reduces the volume before playing a second time, using three \"Control Audio\" Fungus Commands. Do the following:\n\n\n\n\n\n\n(setup) If you have not already done so: Create a new scene, add a Fungus Flowchart to the scene, and select the Block in the Flowchart.\n\n\n\n\n\n\nRename this Block \"Control Audio\".\n\n\n\n\n\n\nIn the Hierarchy Window create a new Empty gameObject, choose menu: \nCreate | Create Empty\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\nRename this new empty gameObject \"GameObject - bear sound\" (or whatever sound name makes sense in your project).\n\n\n\n\n\n\nLocate your desired audio clip file in the Project window, and (with \"GameObject - bear sound\" selected), drag a reference to the audio clip from the Project window into the Inspector:\n\n\n\n\n\n\n\n\n\n\n\n\n\nAn Audio Source component should now be added in the Inspector to \"GameObject - bear sound\". Un-check the Play On Awake property in the Inspector (to stop this sound from playing as soon as the scene begins - \nwe\n want to be in control of this Audio Source object...):\n\n\n\n\n\n\n\n\n\n\n\n\n\nWith your Flowchart Block selected, click the Add Command button in the Inspector and choose menu: \nAudio | Control Audio\n.\n\n\n\n\n\n\n\n\n\n\n\n\n\nDrag the  \"GameObject - bear sound\" gameObject from the Hierarchy into the Audio Source property in the Inspector, and select the Wait Until Finished checkbox (so Fungus will wait for the sound to finish playing before moving on):\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote that the default Control action for a Control Audio Command is \"Play Once\" - we'll leave this property unchanged, since we want our bear sound inside our gameObject to be played once.\n\n\n\n\n\n\nIf you run the scene now, you'll hear the bear sound play once at full volume.\n\n\n\n\n\n\nSince all three of the Control Audio commands we need use a link to \"GameObject - bear sound\" the fastest workflow is to \nduplicate\n each Command, and just change the bits we need. So duplicate your Control Audio command by clicking the Duplicate Command button:\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn the newly copied command, change the Command action to Change Volume, and choose a volume of 0.25 (25%):\n\n\n\n\n\n\n\n\n\n\n\n\n\nOnce again, make a duplicate of the first Control Audio Command (that Plays the sound). Drag this new Command to be last in the sequence of commands.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNow when you play the scene, first the bear sound linked to in the Audio Source component of gameObject \"GameObject - bear sound\"  should play at full volume, then (after having its volume reduced to 25%) it should play a second time at a much reduced volume.\n\n\n\n\n\n\n\n\n\nAudio Tags (link to Say command docs)\n\n\nSince often dialog authors will know just what sound effects or music they wish to associate with their characters utterances, Fungus allows audio-related 'tags' to be embedded in the text of Say Commands. There are four audio related tags:\n\n\n{audio=AudioObjectName} Play Audio Once\n{audioloop=AudioObjectName} Play Audio Loop\n{audiopause=AudioObjectName} Pause Audio\n{audiostop=AudioObjectName} Stop Audio\n\n\n\nUsing tags like this make it important to carefully \nname\n the gameObjects in the Hierarchy window. To explore how to control sounds in gammeObjects do the following:\n\n\n\n\n\n\n(setup) If you have not already done so: Create a new scene, add a Fungus Flowchart to the scene, and select the Block in the Flowchart.\n\n\n\n\n\n\nRename this Block \"Say audio tags\".\n\n\n\n\n\n\nIn the Hierarchy Window create a new Empty gameObject, choose menu: \nCreate | Create Empty\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\nRename this new empty gameObject \"audioBearRoar\", or whatever sound name makes sense in your project, but avoid spaces in the name of this game object.\n\n\n\n\n\n\nLocate your desired audio clip file in the Project window, and (with \"audioBearRoar\" selected), drag a reference to the audio clip from the Project window into the Inspector.\n\n\n\n\n\n\nUn-check the Play On Awake property in the Inspector for the Audio Source component (to stop this sound from playing as soon as the scene begins - \nwe\n want to be in control of this Audio Source object...):\n\n\n\n\n\n\nWith your Flowchart Block selected, click the Add Command button in the Inspector and choose menu: \nNarrative | Say\n. Enter the following for the Story Text property of this Say Command \"... and then the bear roared loudly {audio=audioBearRoar}\":\n\n\n\n\n\n\n\n\n\n\n\n\n\nRun your scene - the bear sound will play after the text has been displayed:", 
            "title": "Recipes - audio"
        }, 
        {
            "location": "/audio/#audio-in-fungus-games", 
            "text": "Almost every game benefits from some sound! Often we categories audio clips into three kinds:   Music  Sound effects  Speech   Fungus provides straightforward ways to include all 3 kinds of audio clip in your game, using the techniques presented here.", 
            "title": "Audio in Fungus games"
        }, 
        {
            "location": "/audio/#sources-of-free-to-use-audio-clips-and-music", 
            "text": "Before you can  add  audio clips to a game you need to get some audio clips. Here are some sources of audio clips to use when learning about audio in Fungus, in case you don't have some of your own to hand.  The following are some good places online to fine music and sound effects for games. Some are free for any use (including commerical), some are just free for personal use. As always, check the licence of media assets before using them for any commerical products ...   Freesound.org  lots of creative commons and royalty free sounds at  SoundBible.com  a great list of audio sources in peoples answers to questions at  Answers.unity3d  and  StackOverflow.com  mixture of free and paid music sources at  PixelProspector.com   You'll find a range of audio clips included inside the Fungus Examples folders:", 
            "title": "Sources of free to use audio clips and music"
        }, 
        {
            "location": "/audio/#adding-audio-assets-to-your-project", 
            "text": "Once you have some audio clips on your computer, you need to import them into your Unity project.  Method 1 (menu)  You can do this one clip at a time, by choosing menu:  Assets | Import New Asset...  and navigating to and selecting each clip.  Method 2 (drag-drop)  Alternatively you can  drag  files or entire folders into your Unity Project window, and Unity will make a copy of, and then import the dragged files:", 
            "title": "Adding audio assets to your project"
        }, 
        {
            "location": "/audio/#three-ways-to-work-with-audio-in-fungus-games", 
            "text": "There are 3 main ways to work with audio in Fungus games. These are the Audio commands, the Say command, and gameObjects containing Unity Audio Source components. All three are discussed below:", 
            "title": "Three ways to work with audio in Fungus games"
        }, 
        {
            "location": "/audio/#list-of-fungus-audio-commands", 
            "text": "The range of audio  Commands  you can add to a Block are as follows:    Also you can declare an audio clip that contains the speech voiceover to correspond to text displayed with a  Say  command:", 
            "title": "List of Fungus audio commands"
        }, 
        {
            "location": "/audio/#play-music-command", 
            "text": "Music sound clips loop, so they are restarted once they have finished playing. Often the first Command in a Block is a  Play Music  Command. Add music to a Block as follows:    (if you have not already done so: Create a new scene, add a Fungus Flowchart to the scene, and select the Block in the Flowchart).    Add a Play Music Command to the current Block by clicking the Add Command (plus-sign \"+\" button) in the Inspector, and then choosing menu:  Audio | Play Music .    Ensure the Play Music command is selected (green highlight) in the top of the Inspector, and then drag the desired music clip file into the \"Music Clip\" property in the bottom half of the Inspector:       Change the volume as desired (the default is 1, values are between 0.0 and 1.0, representing percentages of volume from 0% - 100%).    Play your scene - the music clip should play, and keep looping.    NOTE: If you wish to start playing the music clip from a known time-point (rather than from the beginning), then enter the desired timepoint in the Inspector property \"At Time\" for your Play Music command.", 
            "title": "Play Music command"
        }, 
        {
            "location": "/audio/#play-sound-command", 
            "text": "The Fungus Play Sound Command will play a stated audio clip once. With your Flowchart Block selected, click the Add Command button in the Inspector and choose menu:  Audio | Play Sound . Drag in a sound effect (we chose the BearRoad sound from the Hunter example):    Play the scene, you should hear your sound effect play once.  Note. The default Fungus setting is for the sound effect to start playing, and while it is playing the next Command in the Block will start executing. However, you if you check the \"Wait Until Finished\" checkbox, then Fungus will wait until the sound effect has finished playing, before moving on to execute the next Command in the block:", 
            "title": "Play Sound command"
        }, 
        {
            "location": "/audio/#set-audio-volume-command", 
            "text": "The default volume for music being played is 1 (100%). However, we can change this easily with the Set Audio Volume command. Do the following:    (if you have not already done so: Create a new scene, add a Fungus Flowchart to the scene, and select the Block in the Flowchart).    Rename this Block \"Play Music\".    Add a Play Music Command to the current Block, then drag the desired music clip file into the \"Music Clip\" property in the bottom half of the Inspector:       If you play the scene now, the music will play at full volume (1 = 100%).    Now create a second Block in the Flowchart window named \"quieter\".       Add to this new Block a Set Audio Volume Command.       In the properties of the Set Audio Volume Command set the volume to 0.25 (25%).       Select the \"Play Music\" block, and add a Menu command by clicking the plus-sign add Command button in the Inspector and then choosing menu:  Narrative | Menu .       Set the Text Property to \"Make Quieter\" and the Target Block to Block \"Quieter\":       In the Flowchart window you should now see a green arrow, showing that a Command in Block \"Play Music\" passes control to Block \"quieter\":       When you run the scene, the music will start playing at full volumne, then when y ou click the \"Make Quieter\" button, controll will pass to the \"quieter\" block, and you'll hear the music become much quieter after the Set Audio Volume Command has been executed with a value of 25% (0.25):", 
            "title": "Set Audio Volume command"
        }, 
        {
            "location": "/audio/#the-3-unity-audio-concepts", 
            "text": "Unity has 3 different kinds of Audio 'object', that it is worth understanding when working with audio in Fungus (or any other) Unity project:   Audio Clip  Audio Listener  Audio Source   Unity Audio Clip  Unity uses the term Audio \"Clip\" to refer to the physical sound files (.mp3, .wav, .ogg etc.) that are stored in your Project folder. It is these Audio Clip files that you drag and drop into the \"Music Clip\" and \"Sound Clip\" properties in the Inspector Window, when creating Play Music and Play Sound Commands in a Fungus Block.  Unity Audio \"Listener\"  Basically, if you want sound to be played there must be an Audio Listener component inside one of the gameObjects in your scene. The Main Camera of a scene has one by default, so in most cases you just leave this alone and can rest assured that you have an Audio Listener.  If a scene has no Audio Listener in any gameObject, then no audio will be heard by the user of the game, regardless of how many music and sound clips might be playing.  Sometimes you may add gameObjects to your scene that contain another Audio Listener component. In this case, Unity will present a warnig message stating that more than 1 Audio Listener is present in the scene. If you see such a message, then its best to resolve this problem by disabling all but one Audio Listener...  If you are working with a 3D game, and/or you wish to present a sophisticated stereo sound experience for your user, then you may need to learn about 3D audio. In such games the 3D \"position\" of the gameObject containing the Audio Listener becomes important - but don't worry about this if you are just getting started with audio in Fungus. For 3D effects the Audio Listener is like an \"electronic ear\", so its location determines things like how loud a sound is played (distance from \"ear\") and left-right stereo balance (which \"side\" audio is to the \"ear\") etc.  Unity Audio Source  In Unity the link between an Audio Clip (music/sound) file that we wish to be played, and the Audio Listener in the scene is a Unity Audio Source component of a gameObject. However, in most cases Fungus creates one of these if neeeded, so we don't need to worry about them!  However, for sophisticated control of music and sound and speech in your game there is the facility to make Fungus have detailed control of Unity Audio Sources. It is an Audio Source component that controls how and when and which part of an audio clip is playing (and whether it should loop or not), and whether it is playing or paused, and when resuming should continue from where paused or restart. The volume of a playing clip can also be controlled by properties of an Audio Source.  Learn more about audio in Unity at the  Unity Manual Audio Page .", 
            "title": "The 3 Unity audio concepts"
        }, 
        {
            "location": "/audio/#control-audio-command", 
            "text": "The Fungus Audio Commands cover all common music and sound effect actions, for specialist audio work you may need to access the raw (and complicated) power of Unity audio. The Fungus Command \"Control Audio\" lets Fungus Blocks communicate directly with Unity Audio Source components in any gameObject in the current scene, so your wizard audio team member can do what they need to do with the Unity toolkit, and you can still control playing / looping / volume etc. of the audio in those complex gameObjects.  The Control Audio Command offers five actions that can be communicated to Unity Audio Source components:     We'll learn about this with a simple Unity gameObject that plays a bear sound two times, first at full volume and then reduces the volume before playing a second time, using three \"Control Audio\" Fungus Commands. Do the following:    (setup) If you have not already done so: Create a new scene, add a Fungus Flowchart to the scene, and select the Block in the Flowchart.    Rename this Block \"Control Audio\".    In the Hierarchy Window create a new Empty gameObject, choose menu:  Create | Create Empty :       Rename this new empty gameObject \"GameObject - bear sound\" (or whatever sound name makes sense in your project).    Locate your desired audio clip file in the Project window, and (with \"GameObject - bear sound\" selected), drag a reference to the audio clip from the Project window into the Inspector:       An Audio Source component should now be added in the Inspector to \"GameObject - bear sound\". Un-check the Play On Awake property in the Inspector (to stop this sound from playing as soon as the scene begins -  we  want to be in control of this Audio Source object...):       With your Flowchart Block selected, click the Add Command button in the Inspector and choose menu:  Audio | Control Audio .       Drag the  \"GameObject - bear sound\" gameObject from the Hierarchy into the Audio Source property in the Inspector, and select the Wait Until Finished checkbox (so Fungus will wait for the sound to finish playing before moving on):       Note that the default Control action for a Control Audio Command is \"Play Once\" - we'll leave this property unchanged, since we want our bear sound inside our gameObject to be played once.    If you run the scene now, you'll hear the bear sound play once at full volume.    Since all three of the Control Audio commands we need use a link to \"GameObject - bear sound\" the fastest workflow is to  duplicate  each Command, and just change the bits we need. So duplicate your Control Audio command by clicking the Duplicate Command button:       In the newly copied command, change the Command action to Change Volume, and choose a volume of 0.25 (25%):       Once again, make a duplicate of the first Control Audio Command (that Plays the sound). Drag this new Command to be last in the sequence of commands.       Now when you play the scene, first the bear sound linked to in the Audio Source component of gameObject \"GameObject - bear sound\"  should play at full volume, then (after having its volume reduced to 25%) it should play a second time at a much reduced volume.", 
            "title": "Control Audio command"
        }, 
        {
            "location": "/audio/#audio-tags-link-to-say-command-docs", 
            "text": "Since often dialog authors will know just what sound effects or music they wish to associate with their characters utterances, Fungus allows audio-related 'tags' to be embedded in the text of Say Commands. There are four audio related tags:  {audio=AudioObjectName} Play Audio Once\n{audioloop=AudioObjectName} Play Audio Loop\n{audiopause=AudioObjectName} Pause Audio\n{audiostop=AudioObjectName} Stop Audio  Using tags like this make it important to carefully  name  the gameObjects in the Hierarchy window. To explore how to control sounds in gammeObjects do the following:    (setup) If you have not already done so: Create a new scene, add a Fungus Flowchart to the scene, and select the Block in the Flowchart.    Rename this Block \"Say audio tags\".    In the Hierarchy Window create a new Empty gameObject, choose menu:  Create | Create Empty :       Rename this new empty gameObject \"audioBearRoar\", or whatever sound name makes sense in your project, but avoid spaces in the name of this game object.    Locate your desired audio clip file in the Project window, and (with \"audioBearRoar\" selected), drag a reference to the audio clip from the Project window into the Inspector.    Un-check the Play On Awake property in the Inspector for the Audio Source component (to stop this sound from playing as soon as the scene begins -  we  want to be in control of this Audio Source object...):    With your Flowchart Block selected, click the Add Command button in the Inspector and choose menu:  Narrative | Say . Enter the following for the Story Text property of this Say Command \"... and then the bear roared loudly {audio=audioBearRoar}\":       Run your scene - the bear sound will play after the text has been displayed:", 
            "title": "Audio Tags (link to Say command docs)"
        }
    ]
}